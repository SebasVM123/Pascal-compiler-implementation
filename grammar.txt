------------------------------------------TOKENS------------------------------------------
STRING      : "([^"\n\\]*(\\.?[^"\n\\]*)*)"([ ]*("([^"\n\\]*(\\.?[^"\n\\]*)*)")*)*
FCONST      : (\d*\.\d+)(e(-|\+)?\d+)?|[0-9]\d*e(-|\+)?\d+
ID          : \d*[a-zA-Z_]+(\w|_)*
ICONST      : \d+

AND         : and
BEGIN       : begin
BREAK       : break
DO          : do
ELSE        : else
FLOAT       : float
FUN         : fun
IF          : if
INT         : int
NOT         : not
OR          : or
PRINT       : print
READ        : read
RETURN      : return
SKIP        : skip
THEN        : then
WHILE       : while
WRITE       : write

LE          : <=
LT          : <
GE          : >=
GT          : >
ET          : ==
DF          : !=

AND         : 'and'
OR          : 'or'
NOT         : 'not'

ASSIGNOP    : :=

INT         : 'int'
FLOAT       : 'float'

COMMENT     : \/\*([^*]|(\*+[^*/]))*\*+\/
------------------------------------------------------------------------------------------
---------------------------GRAMATICA INDEPENDIENTE DEL CONTEXTO---------------------------
program     ::= funclist
funclist    ::= funclist func
            | func
func        ::= FUN ID '(' [ parmlist ] ')' [ locallist ] BEGIN stmtlist END
parmlist    ::= parmlist ',' parm
            | parm
parm        ::= ID ':' datatype
datatype    ::= INT [ '[' expr ']' ]
            | FLOAT [ '[' expr ']' ]
locallist   ::= locallist ';' { local ';' }
            | local
local       ::= parm
            | func
stmtlist    ::= stmt { ';' stmt }
stmt        ::= PRINT '(' literal ')'
            | WRITE '(' expr ')'
            | READ '(' location ')'
            | WHILE relation DO stmt
            | BREAK 
            | IF relation then stmt **VERMANANA
            | BEGIN stmtlist END
            | location ASSIGNOP expr
            | RETURN expr
            | SKIP
            | ID '(' exprlist ')'
location    ::= ID [ '[' expr ']' ]
exprlist    ::= expr { ',' expr}
            |
expr        ::= factor '+' expr
            | factor '-' expr
            | factor
factor      :== term '*' factor
            | term '/' factor
            | term
term        :== ID '(' exprlist ')'
            | ID '[' expr ']'
            | ID
            | number
            | '(' relation ')'
            | INT '(' expr ')'
            | FLOAT '(' expr ')'
            | '-' term
            | '+' term
            | '(' expr ')'
relation    ::= expr LT expr
            | expr LE expr
            | expr GT expr
            | expr GE expr
            | expr ET expr
            | expr DF expr
            | relop AND relop
            | relop OR relop
            | NOT relop 