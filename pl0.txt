Grammar:

Rule 0     S' -> program
Rule 1     program -> funclist
Rule 2     funclist -> func
Rule 3     funclist -> funclist func
Rule 4     func -> FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END
Rule 5     _1_parmlist_optional -> parmlist
Rule 6     _1_parmlist_optional -> <empty>
Rule 7     _2_locallist_optional -> locallist
Rule 8     _2_locallist_optional -> <empty>
Rule 9     parmlist -> parm
Rule 10    parmlist -> parmlist , parm
Rule 11    parm -> ID : datatype
Rule 12    datatype -> FLOAT
Rule 13    datatype -> INT
Rule 14    datatype -> FLOAT [ expr ]
Rule 15    datatype -> INT [ expr ]
Rule 16    locallist -> local ; locallist
Rule 17    locallist -> local ;
Rule 18    local -> func
Rule 19    local -> vardecl
Rule 20    vardecl -> ID : datatype
Rule 21    stmtlist -> stmt ; stmtlist
Rule 22    stmtlist -> stmt
Rule 23    stmt -> ID ( exprlist )
Rule 24    stmt -> location ASSIGNOP expr
Rule 25    stmt -> RETURN expr
Rule 26    stmt -> SKIP
Rule 27    stmt -> BEGIN stmtlist END
Rule 28    stmt -> instr_open
Rule 29    stmt -> instr_rel
Rule 30    stmt -> BREAK
Rule 31    stmt -> WHILE relation DO stmt
Rule 32    stmt -> READ ( location )
Rule 33    stmt -> WRITE ( expr )
Rule 34    stmt -> PRINT ( literal )
Rule 35    instr_open -> IF relation THEN stmt ELSE stmt  [precedence=left, level=2]
Rule 36    instr_rel -> IF relation THEN stmt  [precedence=left, level=1]
Rule 37    literal -> STRING
Rule 38    location -> ID [ expr ]
Rule 39    location -> ID
Rule 40    expr -> FLOAT ( expr )
Rule 41    expr -> INT ( expr )
Rule 42    expr -> ID ( _3_exprlist_optional )
Rule 43    _3_exprlist_optional -> exprlist
Rule 44    _3_exprlist_optional -> <empty>
Rule 45    expr -> ID [ expr ]
Rule 46    expr -> ID
Rule 47    expr -> FCONST
Rule 48    expr -> ICONST
Rule 49    expr -> ( expr )
Rule 50    expr -> + expr  [precedence=right, level=9]
Rule 51    expr -> - expr  [precedence=right, level=9]
Rule 52    expr -> expr / expr  [precedence=left, level=8]
Rule 53    expr -> expr * expr  [precedence=left, level=8]
Rule 54    expr -> expr - expr  [precedence=left, level=7]
Rule 55    expr -> expr + expr  [precedence=left, level=7]
Rule 56    relation -> ( relation )
Rule 57    relation -> NOT relation  [precedence=right, level=9]
Rule 58    relation -> relation OR relation  [precedence=left, level=3]
Rule 59    relation -> relation AND relation  [precedence=left, level=4]
Rule 60    relation -> expr DF expr  [precedence=left, level=5]
Rule 61    relation -> expr ET expr  [precedence=left, level=5]
Rule 62    relation -> expr GE expr  [precedence=left, level=6]
Rule 63    relation -> expr GT expr  [precedence=left, level=6]
Rule 64    relation -> expr LE expr  [precedence=left, level=6]
Rule 65    relation -> expr LT expr  [precedence=left, level=6]
Rule 66    exprlist -> expr
Rule 67    exprlist -> exprlist , expr

Terminals, with rules where they appear:

(                    : 4 23 32 33 34 40 41 42 49 56
)                    : 4 23 32 33 34 40 41 42 49 56
*                    : 53
+                    : 50 55
,                    : 10 67
-                    : 51 54
/                    : 52
:                    : 11 20
;                    : 16 17 21
AND                  : 59
ASSIGNOP             : 24
BEGIN                : 4 27
BREAK                : 30
DF                   : 60
DO                   : 31
ELSE                 : 35
END                  : 4 27
ET                   : 61
FCONST               : 47
FLOAT                : 12 14 40
FUN                  : 4
GE                   : 62
GT                   : 63
ICONST               : 48
ID                   : 4 11 20 23 38 39 42 45 46
IF                   : 35 36
INT                  : 13 15 41
LE                   : 64
LT                   : 65
NOT                  : 57
OR                   : 58
PRINT                : 34
READ                 : 32
RETURN               : 25
SKIP                 : 26
STRING               : 37
THEN                 : 35 36
WHILE                : 31
WRITE                : 33
[                    : 14 15 38 45
]                    : 14 15 38 45
error                : 

Nonterminals, with rules where they appear:

_1_parmlist_optional : 4
_2_locallist_optional : 4
_3_exprlist_optional : 42
datatype             : 11 20
expr                 : 14 15 24 25 33 38 40 41 45 49 50 51 52 52 53 53 54 54 55 55 60 60 61 61 62 62 63 63 64 64 65 65 66 67
exprlist             : 23 43 67
func                 : 2 3 18
funclist             : 1 3
instr_open           : 28
instr_rel            : 29
literal              : 34
local                : 16 17
locallist            : 7 16
location             : 24 32
parm                 : 9 10
parmlist             : 5 10
program              : 0
relation             : 31 35 36 56 57 58 58 59 59
stmt                 : 21 22 31 35 35 36
stmtlist             : 4 21 27
vardecl              : 19


state 0

    (0) S' -> . program
    (1) program -> . funclist
    (2) funclist -> . func
    (3) funclist -> . funclist func
    (4) func -> . FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END
    FUN             shift and go to state 4

    program                        shift and go to state 1
    funclist                       shift and go to state 2
    func                           shift and go to state 3

state 1

    (0) S' -> program .


state 2

    (1) program -> funclist .
    (3) funclist -> funclist . func
    (4) func -> . FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END
    $end            reduce using rule 1 (program -> funclist .)
    FUN             shift and go to state 4

    func                           shift and go to state 5

state 3

    (2) funclist -> func .
    FUN             reduce using rule 2 (funclist -> func .)
    $end            reduce using rule 2 (funclist -> func .)


state 4

    (4) func -> FUN . ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END
    ID              shift and go to state 6


state 5

    (3) funclist -> funclist func .
    FUN             reduce using rule 3 (funclist -> funclist func .)
    $end            reduce using rule 3 (funclist -> funclist func .)


state 6

    (4) func -> FUN ID . ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END
    (               shift and go to state 7


state 7

    (4) func -> FUN ID ( . _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END
    (5) _1_parmlist_optional -> . parmlist
    (6) _1_parmlist_optional -> .
    (9) parmlist -> . parm
    (10) parmlist -> . parmlist , parm
    (11) parm -> . ID : datatype
    )               reduce using rule 6 (_1_parmlist_optional -> .)
    ID              shift and go to state 8

    _1_parmlist_optional           shift and go to state 9
    parmlist                       shift and go to state 10
    parm                           shift and go to state 11

state 8

    (11) parm -> ID . : datatype
    :               shift and go to state 12


state 9

    (4) func -> FUN ID ( _1_parmlist_optional . ) _2_locallist_optional BEGIN stmtlist END
    )               shift and go to state 13


state 10

    (5) _1_parmlist_optional -> parmlist .
    (10) parmlist -> parmlist . , parm
    )               reduce using rule 5 (_1_parmlist_optional -> parmlist .)
    ,               shift and go to state 14


state 11

    (9) parmlist -> parm .
    ,               reduce using rule 9 (parmlist -> parm .)
    )               reduce using rule 9 (parmlist -> parm .)


state 12

    (11) parm -> ID : . datatype
    (12) datatype -> . FLOAT
    (13) datatype -> . INT
    (14) datatype -> . FLOAT [ expr ]
    (15) datatype -> . INT [ expr ]
    FLOAT           shift and go to state 16
    INT             shift and go to state 17

    datatype                       shift and go to state 15

state 13

    (4) func -> FUN ID ( _1_parmlist_optional ) . _2_locallist_optional BEGIN stmtlist END
    (7) _2_locallist_optional -> . locallist
    (8) _2_locallist_optional -> .
    (16) locallist -> . local ; locallist
    (17) locallist -> . local ;
    (18) local -> . func
    (19) local -> . vardecl
    (4) func -> . FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END
    (20) vardecl -> . ID : datatype
    BEGIN           reduce using rule 8 (_2_locallist_optional -> .)
    FUN             shift and go to state 4
    ID              shift and go to state 18

    _2_locallist_optional          shift and go to state 19
    locallist                      shift and go to state 20
    local                          shift and go to state 21
    func                           shift and go to state 22
    vardecl                        shift and go to state 23

state 14

    (10) parmlist -> parmlist , . parm
    (11) parm -> . ID : datatype
    ID              shift and go to state 8

    parm                           shift and go to state 24

state 15

    (11) parm -> ID : datatype .
    ,               reduce using rule 11 (parm -> ID : datatype .)
    )               reduce using rule 11 (parm -> ID : datatype .)


state 16

    (12) datatype -> FLOAT .
    (14) datatype -> FLOAT . [ expr ]
    ,               reduce using rule 12 (datatype -> FLOAT .)
    )               reduce using rule 12 (datatype -> FLOAT .)
    ;               reduce using rule 12 (datatype -> FLOAT .)
    [               shift and go to state 25


state 17

    (13) datatype -> INT .
    (15) datatype -> INT . [ expr ]
    ,               reduce using rule 13 (datatype -> INT .)
    )               reduce using rule 13 (datatype -> INT .)
    ;               reduce using rule 13 (datatype -> INT .)
    [               shift and go to state 26


state 18

    (20) vardecl -> ID . : datatype
    :               shift and go to state 27


state 19

    (4) func -> FUN ID ( _1_parmlist_optional ) _2_locallist_optional . BEGIN stmtlist END
    BEGIN           shift and go to state 28


state 20

    (7) _2_locallist_optional -> locallist .
    BEGIN           reduce using rule 7 (_2_locallist_optional -> locallist .)


state 21

    (16) locallist -> local . ; locallist
    (17) locallist -> local . ;
    ;               shift and go to state 29


state 22

    (18) local -> func .
    ;               reduce using rule 18 (local -> func .)


state 23

    (19) local -> vardecl .
    ;               reduce using rule 19 (local -> vardecl .)


state 24

    (10) parmlist -> parmlist , parm .
    ,               reduce using rule 10 (parmlist -> parmlist , parm .)
    )               reduce using rule 10 (parmlist -> parmlist , parm .)


state 25

    (14) datatype -> FLOAT [ . expr ]
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 31

state 26

    (15) datatype -> INT [ . expr ]
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 39

state 27

    (20) vardecl -> ID : . datatype
    (12) datatype -> . FLOAT
    (13) datatype -> . INT
    (14) datatype -> . FLOAT [ expr ]
    (15) datatype -> . INT [ expr ]
    FLOAT           shift and go to state 16
    INT             shift and go to state 17

    datatype                       shift and go to state 40

state 28

    (4) func -> FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN . stmtlist END
    (21) stmtlist -> . stmt ; stmtlist
    (22) stmtlist -> . stmt
    (23) stmt -> . ID ( exprlist )
    (24) stmt -> . location ASSIGNOP expr
    (25) stmt -> . RETURN expr
    (26) stmt -> . SKIP
    (27) stmt -> . BEGIN stmtlist END
    (28) stmt -> . instr_open
    (29) stmt -> . instr_rel
    (30) stmt -> . BREAK
    (31) stmt -> . WHILE relation DO stmt
    (32) stmt -> . READ ( location )
    (33) stmt -> . WRITE ( expr )
    (34) stmt -> . PRINT ( literal )
    (38) location -> . ID [ expr ]
    (39) location -> . ID
    (35) instr_open -> . IF relation THEN stmt ELSE stmt
    (36) instr_rel -> . IF relation THEN stmt
    ID              shift and go to state 41
    RETURN          shift and go to state 46
    SKIP            shift and go to state 47
    BEGIN           shift and go to state 42
    BREAK           shift and go to state 50
    WHILE           shift and go to state 51
    READ            shift and go to state 52
    WRITE           shift and go to state 53
    PRINT           shift and go to state 54
    IF              shift and go to state 55

    stmtlist                       shift and go to state 43
    stmt                           shift and go to state 44
    location                       shift and go to state 45
    instr_open                     shift and go to state 48
    instr_rel                      shift and go to state 49

state 29

    (16) locallist -> local ; . locallist
    (17) locallist -> local ; .
    (16) locallist -> . local ; locallist
    (17) locallist -> . local ;
    (18) local -> . func
    (19) local -> . vardecl
    (4) func -> . FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END
    (20) vardecl -> . ID : datatype
    BEGIN           reduce using rule 17 (locallist -> local ; .)
    FUN             shift and go to state 4
    ID              shift and go to state 18

    local                          shift and go to state 21
    locallist                      shift and go to state 56
    func                           shift and go to state 22
    vardecl                        shift and go to state 23

state 30

    (40) expr -> FLOAT . ( expr )
    (               shift and go to state 57


state 31

    (14) datatype -> FLOAT [ expr . ]
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    ]               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62


state 32

    (49) expr -> ( . expr )
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 63

state 33

    (41) expr -> INT . ( expr )
    (               shift and go to state 64


state 34

    (42) expr -> ID . ( _3_exprlist_optional )
    (45) expr -> ID . [ expr ]
    (46) expr -> ID .
    (               shift and go to state 65
    [               shift and go to state 66
    ]               reduce using rule 46 (expr -> ID .)
    /               reduce using rule 46 (expr -> ID .)
    *               reduce using rule 46 (expr -> ID .)
    -               reduce using rule 46 (expr -> ID .)
    +               reduce using rule 46 (expr -> ID .)
    )               reduce using rule 46 (expr -> ID .)
    ;               reduce using rule 46 (expr -> ID .)
    END             reduce using rule 46 (expr -> ID .)
    ELSE            reduce using rule 46 (expr -> ID .)
    DF              reduce using rule 46 (expr -> ID .)
    ET              reduce using rule 46 (expr -> ID .)
    GE              reduce using rule 46 (expr -> ID .)
    GT              reduce using rule 46 (expr -> ID .)
    LE              reduce using rule 46 (expr -> ID .)
    LT              reduce using rule 46 (expr -> ID .)
    ,               reduce using rule 46 (expr -> ID .)
    DO              reduce using rule 46 (expr -> ID .)
    OR              reduce using rule 46 (expr -> ID .)
    AND             reduce using rule 46 (expr -> ID .)
    THEN            reduce using rule 46 (expr -> ID .)


state 35

    (47) expr -> FCONST .
    ]               reduce using rule 47 (expr -> FCONST .)
    /               reduce using rule 47 (expr -> FCONST .)
    *               reduce using rule 47 (expr -> FCONST .)
    -               reduce using rule 47 (expr -> FCONST .)
    +               reduce using rule 47 (expr -> FCONST .)
    )               reduce using rule 47 (expr -> FCONST .)
    ;               reduce using rule 47 (expr -> FCONST .)
    END             reduce using rule 47 (expr -> FCONST .)
    ELSE            reduce using rule 47 (expr -> FCONST .)
    DF              reduce using rule 47 (expr -> FCONST .)
    ET              reduce using rule 47 (expr -> FCONST .)
    GE              reduce using rule 47 (expr -> FCONST .)
    GT              reduce using rule 47 (expr -> FCONST .)
    LE              reduce using rule 47 (expr -> FCONST .)
    LT              reduce using rule 47 (expr -> FCONST .)
    ,               reduce using rule 47 (expr -> FCONST .)
    DO              reduce using rule 47 (expr -> FCONST .)
    OR              reduce using rule 47 (expr -> FCONST .)
    AND             reduce using rule 47 (expr -> FCONST .)
    THEN            reduce using rule 47 (expr -> FCONST .)


state 36

    (48) expr -> ICONST .
    ]               reduce using rule 48 (expr -> ICONST .)
    /               reduce using rule 48 (expr -> ICONST .)
    *               reduce using rule 48 (expr -> ICONST .)
    -               reduce using rule 48 (expr -> ICONST .)
    +               reduce using rule 48 (expr -> ICONST .)
    )               reduce using rule 48 (expr -> ICONST .)
    ;               reduce using rule 48 (expr -> ICONST .)
    END             reduce using rule 48 (expr -> ICONST .)
    ELSE            reduce using rule 48 (expr -> ICONST .)
    DF              reduce using rule 48 (expr -> ICONST .)
    ET              reduce using rule 48 (expr -> ICONST .)
    GE              reduce using rule 48 (expr -> ICONST .)
    GT              reduce using rule 48 (expr -> ICONST .)
    LE              reduce using rule 48 (expr -> ICONST .)
    LT              reduce using rule 48 (expr -> ICONST .)
    ,               reduce using rule 48 (expr -> ICONST .)
    DO              reduce using rule 48 (expr -> ICONST .)
    OR              reduce using rule 48 (expr -> ICONST .)
    AND             reduce using rule 48 (expr -> ICONST .)
    THEN            reduce using rule 48 (expr -> ICONST .)


state 37

    (50) expr -> + . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 67

state 38

    (51) expr -> - . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 68

state 39

    (15) datatype -> INT [ expr . ]
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    ]               shift and go to state 69
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62


state 40

    (20) vardecl -> ID : datatype .
    ;               reduce using rule 20 (vardecl -> ID : datatype .)


state 41

    (23) stmt -> ID . ( exprlist )
    (38) location -> ID . [ expr ]
    (39) location -> ID .
    (               shift and go to state 70
    [               shift and go to state 71
    ASSIGNOP        reduce using rule 39 (location -> ID .)


state 42

    (27) stmt -> BEGIN . stmtlist END
    (21) stmtlist -> . stmt ; stmtlist
    (22) stmtlist -> . stmt
    (23) stmt -> . ID ( exprlist )
    (24) stmt -> . location ASSIGNOP expr
    (25) stmt -> . RETURN expr
    (26) stmt -> . SKIP
    (27) stmt -> . BEGIN stmtlist END
    (28) stmt -> . instr_open
    (29) stmt -> . instr_rel
    (30) stmt -> . BREAK
    (31) stmt -> . WHILE relation DO stmt
    (32) stmt -> . READ ( location )
    (33) stmt -> . WRITE ( expr )
    (34) stmt -> . PRINT ( literal )
    (38) location -> . ID [ expr ]
    (39) location -> . ID
    (35) instr_open -> . IF relation THEN stmt ELSE stmt
    (36) instr_rel -> . IF relation THEN stmt
    ID              shift and go to state 41
    RETURN          shift and go to state 46
    SKIP            shift and go to state 47
    BEGIN           shift and go to state 42
    BREAK           shift and go to state 50
    WHILE           shift and go to state 51
    READ            shift and go to state 52
    WRITE           shift and go to state 53
    PRINT           shift and go to state 54
    IF              shift and go to state 55

    stmtlist                       shift and go to state 72
    stmt                           shift and go to state 44
    location                       shift and go to state 45
    instr_open                     shift and go to state 48
    instr_rel                      shift and go to state 49

state 43

    (4) func -> FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist . END
    END             shift and go to state 73


state 44

    (21) stmtlist -> stmt . ; stmtlist
    (22) stmtlist -> stmt .
    ;               shift and go to state 74
    END             reduce using rule 22 (stmtlist -> stmt .)


state 45

    (24) stmt -> location . ASSIGNOP expr
    ASSIGNOP        shift and go to state 75


state 46

    (25) stmt -> RETURN . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 76

state 47

    (26) stmt -> SKIP .
    ;               reduce using rule 26 (stmt -> SKIP .)
    END             reduce using rule 26 (stmt -> SKIP .)
    ELSE            reduce using rule 26 (stmt -> SKIP .)


state 48

    (28) stmt -> instr_open .
    ;               reduce using rule 28 (stmt -> instr_open .)
    END             reduce using rule 28 (stmt -> instr_open .)
    ELSE            reduce using rule 28 (stmt -> instr_open .)


state 49

    (29) stmt -> instr_rel .
    ;               reduce using rule 29 (stmt -> instr_rel .)
    END             reduce using rule 29 (stmt -> instr_rel .)
    ELSE            reduce using rule 29 (stmt -> instr_rel .)


state 50

    (30) stmt -> BREAK .
    ;               reduce using rule 30 (stmt -> BREAK .)
    END             reduce using rule 30 (stmt -> BREAK .)
    ELSE            reduce using rule 30 (stmt -> BREAK .)


state 51

    (31) stmt -> WHILE . relation DO stmt
    (56) relation -> . ( relation )
    (57) relation -> . NOT relation
    (58) relation -> . relation OR relation
    (59) relation -> . relation AND relation
    (60) relation -> . expr DF expr
    (61) relation -> . expr ET expr
    (62) relation -> . expr GE expr
    (63) relation -> . expr GT expr
    (64) relation -> . expr LE expr
    (65) relation -> . expr LT expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    (               shift and go to state 78
    NOT             shift and go to state 79
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38

    relation                       shift and go to state 77
    expr                           shift and go to state 80

state 52

    (32) stmt -> READ . ( location )
    (               shift and go to state 81


state 53

    (33) stmt -> WRITE . ( expr )
    (               shift and go to state 82


state 54

    (34) stmt -> PRINT . ( literal )
    (               shift and go to state 83


state 55

    (35) instr_open -> IF . relation THEN stmt ELSE stmt
    (36) instr_rel -> IF . relation THEN stmt
    (56) relation -> . ( relation )
    (57) relation -> . NOT relation
    (58) relation -> . relation OR relation
    (59) relation -> . relation AND relation
    (60) relation -> . expr DF expr
    (61) relation -> . expr ET expr
    (62) relation -> . expr GE expr
    (63) relation -> . expr GT expr
    (64) relation -> . expr LE expr
    (65) relation -> . expr LT expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    (               shift and go to state 78
    NOT             shift and go to state 79
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38

    relation                       shift and go to state 84
    expr                           shift and go to state 80

state 56

    (16) locallist -> local ; locallist .
    BEGIN           reduce using rule 16 (locallist -> local ; locallist .)


state 57

    (40) expr -> FLOAT ( . expr )
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 85

state 58

    (14) datatype -> FLOAT [ expr ] .
    ,               reduce using rule 14 (datatype -> FLOAT [ expr ] .)
    )               reduce using rule 14 (datatype -> FLOAT [ expr ] .)
    ;               reduce using rule 14 (datatype -> FLOAT [ expr ] .)


state 59

    (52) expr -> expr / . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 86

state 60

    (53) expr -> expr * . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 87

state 61

    (54) expr -> expr - . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 88

state 62

    (55) expr -> expr + . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 89

state 63

    (49) expr -> ( expr . )
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    )               shift and go to state 90
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62


state 64

    (41) expr -> INT ( . expr )
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 91

state 65

    (42) expr -> ID ( . _3_exprlist_optional )
    (43) _3_exprlist_optional -> . exprlist
    (44) _3_exprlist_optional -> .
    (66) exprlist -> . expr
    (67) exprlist -> . exprlist , expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    )               reduce using rule 44 (_3_exprlist_optional -> .)
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    _3_exprlist_optional           shift and go to state 92
    exprlist                       shift and go to state 93
    expr                           shift and go to state 94

state 66

    (45) expr -> ID [ . expr ]
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 95

state 67

    (50) expr -> + expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    ]               reduce using rule 50 (expr -> + expr .)
    /               reduce using rule 50 (expr -> + expr .)
    *               reduce using rule 50 (expr -> + expr .)
    -               reduce using rule 50 (expr -> + expr .)
    +               reduce using rule 50 (expr -> + expr .)
    )               reduce using rule 50 (expr -> + expr .)
    ;               reduce using rule 50 (expr -> + expr .)
    END             reduce using rule 50 (expr -> + expr .)
    ELSE            reduce using rule 50 (expr -> + expr .)
    DF              reduce using rule 50 (expr -> + expr .)
    ET              reduce using rule 50 (expr -> + expr .)
    GE              reduce using rule 50 (expr -> + expr .)
    GT              reduce using rule 50 (expr -> + expr .)
    LE              reduce using rule 50 (expr -> + expr .)
    LT              reduce using rule 50 (expr -> + expr .)
    ,               reduce using rule 50 (expr -> + expr .)
    DO              reduce using rule 50 (expr -> + expr .)
    OR              reduce using rule 50 (expr -> + expr .)
    AND             reduce using rule 50 (expr -> + expr .)
    THEN            reduce using rule 50 (expr -> + expr .)


state 68

    (51) expr -> - expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    ]               reduce using rule 51 (expr -> - expr .)
    /               reduce using rule 51 (expr -> - expr .)
    *               reduce using rule 51 (expr -> - expr .)
    -               reduce using rule 51 (expr -> - expr .)
    +               reduce using rule 51 (expr -> - expr .)
    )               reduce using rule 51 (expr -> - expr .)
    ;               reduce using rule 51 (expr -> - expr .)
    END             reduce using rule 51 (expr -> - expr .)
    ELSE            reduce using rule 51 (expr -> - expr .)
    DF              reduce using rule 51 (expr -> - expr .)
    ET              reduce using rule 51 (expr -> - expr .)
    GE              reduce using rule 51 (expr -> - expr .)
    GT              reduce using rule 51 (expr -> - expr .)
    LE              reduce using rule 51 (expr -> - expr .)
    LT              reduce using rule 51 (expr -> - expr .)
    ,               reduce using rule 51 (expr -> - expr .)
    DO              reduce using rule 51 (expr -> - expr .)
    OR              reduce using rule 51 (expr -> - expr .)
    AND             reduce using rule 51 (expr -> - expr .)
    THEN            reduce using rule 51 (expr -> - expr .)


state 69

    (15) datatype -> INT [ expr ] .
    ,               reduce using rule 15 (datatype -> INT [ expr ] .)
    )               reduce using rule 15 (datatype -> INT [ expr ] .)
    ;               reduce using rule 15 (datatype -> INT [ expr ] .)


state 70

    (23) stmt -> ID ( . exprlist )
    (66) exprlist -> . expr
    (67) exprlist -> . exprlist , expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    exprlist                       shift and go to state 96
    expr                           shift and go to state 94

state 71

    (38) location -> ID [ . expr ]
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 97

state 72

    (27) stmt -> BEGIN stmtlist . END
    END             shift and go to state 98


state 73

    (4) func -> FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END .
    FUN             reduce using rule 4 (func -> FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END .)
    $end            reduce using rule 4 (func -> FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END .)
    ;               reduce using rule 4 (func -> FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END .)


state 74

    (21) stmtlist -> stmt ; . stmtlist
    (21) stmtlist -> . stmt ; stmtlist
    (22) stmtlist -> . stmt
    (23) stmt -> . ID ( exprlist )
    (24) stmt -> . location ASSIGNOP expr
    (25) stmt -> . RETURN expr
    (26) stmt -> . SKIP
    (27) stmt -> . BEGIN stmtlist END
    (28) stmt -> . instr_open
    (29) stmt -> . instr_rel
    (30) stmt -> . BREAK
    (31) stmt -> . WHILE relation DO stmt
    (32) stmt -> . READ ( location )
    (33) stmt -> . WRITE ( expr )
    (34) stmt -> . PRINT ( literal )
    (38) location -> . ID [ expr ]
    (39) location -> . ID
    (35) instr_open -> . IF relation THEN stmt ELSE stmt
    (36) instr_rel -> . IF relation THEN stmt
    ID              shift and go to state 41
    RETURN          shift and go to state 46
    SKIP            shift and go to state 47
    BEGIN           shift and go to state 42
    BREAK           shift and go to state 50
    WHILE           shift and go to state 51
    READ            shift and go to state 52
    WRITE           shift and go to state 53
    PRINT           shift and go to state 54
    IF              shift and go to state 55

    stmt                           shift and go to state 44
    stmtlist                       shift and go to state 99
    location                       shift and go to state 45
    instr_open                     shift and go to state 48
    instr_rel                      shift and go to state 49

state 75

    (24) stmt -> location ASSIGNOP . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 100

state 76

    (25) stmt -> RETURN expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    ;               reduce using rule 25 (stmt -> RETURN expr .)
    END             reduce using rule 25 (stmt -> RETURN expr .)
    ELSE            reduce using rule 25 (stmt -> RETURN expr .)
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62


state 77

    (31) stmt -> WHILE relation . DO stmt
    (58) relation -> relation . OR relation
    (59) relation -> relation . AND relation
    DO              shift and go to state 101
    OR              shift and go to state 102
    AND             shift and go to state 103


state 78

    (56) relation -> ( . relation )
    (49) expr -> ( . expr )
    (56) relation -> . ( relation )
    (57) relation -> . NOT relation
    (58) relation -> . relation OR relation
    (59) relation -> . relation AND relation
    (60) relation -> . expr DF expr
    (61) relation -> . expr ET expr
    (62) relation -> . expr GE expr
    (63) relation -> . expr GT expr
    (64) relation -> . expr LE expr
    (65) relation -> . expr LT expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    (               shift and go to state 78
    NOT             shift and go to state 79
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38

    relation                       shift and go to state 104
    expr                           shift and go to state 105

state 79

    (57) relation -> NOT . relation
    (56) relation -> . ( relation )
    (57) relation -> . NOT relation
    (58) relation -> . relation OR relation
    (59) relation -> . relation AND relation
    (60) relation -> . expr DF expr
    (61) relation -> . expr ET expr
    (62) relation -> . expr GE expr
    (63) relation -> . expr GT expr
    (64) relation -> . expr LE expr
    (65) relation -> . expr LT expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    (               shift and go to state 78
    NOT             shift and go to state 79
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38

    relation                       shift and go to state 106
    expr                           shift and go to state 80

state 80

    (60) relation -> expr . DF expr
    (61) relation -> expr . ET expr
    (62) relation -> expr . GE expr
    (63) relation -> expr . GT expr
    (64) relation -> expr . LE expr
    (65) relation -> expr . LT expr
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    DF              shift and go to state 107
    ET              shift and go to state 108
    GE              shift and go to state 109
    GT              shift and go to state 110
    LE              shift and go to state 111
    LT              shift and go to state 112
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62


state 81

    (32) stmt -> READ ( . location )
    (38) location -> . ID [ expr ]
    (39) location -> . ID
    ID              shift and go to state 114

    location                       shift and go to state 113

state 82

    (33) stmt -> WRITE ( . expr )
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 115

state 83

    (34) stmt -> PRINT ( . literal )
    (37) literal -> . STRING
    STRING          shift and go to state 117

    literal                        shift and go to state 116

state 84

    (35) instr_open -> IF relation . THEN stmt ELSE stmt
    (36) instr_rel -> IF relation . THEN stmt
    (58) relation -> relation . OR relation
    (59) relation -> relation . AND relation
    THEN            shift and go to state 118
    OR              shift and go to state 102
    AND             shift and go to state 103


state 85

    (40) expr -> FLOAT ( expr . )
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    )               shift and go to state 119
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62


state 86

    (52) expr -> expr / expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    ]               reduce using rule 52 (expr -> expr / expr .)
    /               reduce using rule 52 (expr -> expr / expr .)
    *               reduce using rule 52 (expr -> expr / expr .)
    -               reduce using rule 52 (expr -> expr / expr .)
    +               reduce using rule 52 (expr -> expr / expr .)
    )               reduce using rule 52 (expr -> expr / expr .)
    ;               reduce using rule 52 (expr -> expr / expr .)
    END             reduce using rule 52 (expr -> expr / expr .)
    ELSE            reduce using rule 52 (expr -> expr / expr .)
    DF              reduce using rule 52 (expr -> expr / expr .)
    ET              reduce using rule 52 (expr -> expr / expr .)
    GE              reduce using rule 52 (expr -> expr / expr .)
    GT              reduce using rule 52 (expr -> expr / expr .)
    LE              reduce using rule 52 (expr -> expr / expr .)
    LT              reduce using rule 52 (expr -> expr / expr .)
    ,               reduce using rule 52 (expr -> expr / expr .)
    DO              reduce using rule 52 (expr -> expr / expr .)
    OR              reduce using rule 52 (expr -> expr / expr .)
    AND             reduce using rule 52 (expr -> expr / expr .)
    THEN            reduce using rule 52 (expr -> expr / expr .)


state 87

    (53) expr -> expr * expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    ]               reduce using rule 53 (expr -> expr * expr .)
    /               reduce using rule 53 (expr -> expr * expr .)
    *               reduce using rule 53 (expr -> expr * expr .)
    -               reduce using rule 53 (expr -> expr * expr .)
    +               reduce using rule 53 (expr -> expr * expr .)
    )               reduce using rule 53 (expr -> expr * expr .)
    ;               reduce using rule 53 (expr -> expr * expr .)
    END             reduce using rule 53 (expr -> expr * expr .)
    ELSE            reduce using rule 53 (expr -> expr * expr .)
    DF              reduce using rule 53 (expr -> expr * expr .)
    ET              reduce using rule 53 (expr -> expr * expr .)
    GE              reduce using rule 53 (expr -> expr * expr .)
    GT              reduce using rule 53 (expr -> expr * expr .)
    LE              reduce using rule 53 (expr -> expr * expr .)
    LT              reduce using rule 53 (expr -> expr * expr .)
    ,               reduce using rule 53 (expr -> expr * expr .)
    DO              reduce using rule 53 (expr -> expr * expr .)
    OR              reduce using rule 53 (expr -> expr * expr .)
    AND             reduce using rule 53 (expr -> expr * expr .)
    THEN            reduce using rule 53 (expr -> expr * expr .)


state 88

    (54) expr -> expr - expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    ]               reduce using rule 54 (expr -> expr - expr .)
    -               reduce using rule 54 (expr -> expr - expr .)
    +               reduce using rule 54 (expr -> expr - expr .)
    )               reduce using rule 54 (expr -> expr - expr .)
    ;               reduce using rule 54 (expr -> expr - expr .)
    END             reduce using rule 54 (expr -> expr - expr .)
    ELSE            reduce using rule 54 (expr -> expr - expr .)
    DF              reduce using rule 54 (expr -> expr - expr .)
    ET              reduce using rule 54 (expr -> expr - expr .)
    GE              reduce using rule 54 (expr -> expr - expr .)
    GT              reduce using rule 54 (expr -> expr - expr .)
    LE              reduce using rule 54 (expr -> expr - expr .)
    LT              reduce using rule 54 (expr -> expr - expr .)
    ,               reduce using rule 54 (expr -> expr - expr .)
    DO              reduce using rule 54 (expr -> expr - expr .)
    OR              reduce using rule 54 (expr -> expr - expr .)
    AND             reduce using rule 54 (expr -> expr - expr .)
    THEN            reduce using rule 54 (expr -> expr - expr .)
    /               shift and go to state 59
    *               shift and go to state 60


state 89

    (55) expr -> expr + expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    ]               reduce using rule 55 (expr -> expr + expr .)
    -               reduce using rule 55 (expr -> expr + expr .)
    +               reduce using rule 55 (expr -> expr + expr .)
    )               reduce using rule 55 (expr -> expr + expr .)
    ;               reduce using rule 55 (expr -> expr + expr .)
    END             reduce using rule 55 (expr -> expr + expr .)
    ELSE            reduce using rule 55 (expr -> expr + expr .)
    DF              reduce using rule 55 (expr -> expr + expr .)
    ET              reduce using rule 55 (expr -> expr + expr .)
    GE              reduce using rule 55 (expr -> expr + expr .)
    GT              reduce using rule 55 (expr -> expr + expr .)
    LE              reduce using rule 55 (expr -> expr + expr .)
    LT              reduce using rule 55 (expr -> expr + expr .)
    ,               reduce using rule 55 (expr -> expr + expr .)
    DO              reduce using rule 55 (expr -> expr + expr .)
    OR              reduce using rule 55 (expr -> expr + expr .)
    AND             reduce using rule 55 (expr -> expr + expr .)
    THEN            reduce using rule 55 (expr -> expr + expr .)
    /               shift and go to state 59
    *               shift and go to state 60


state 90

    (49) expr -> ( expr ) .
    ]               reduce using rule 49 (expr -> ( expr ) .)
    /               reduce using rule 49 (expr -> ( expr ) .)
    *               reduce using rule 49 (expr -> ( expr ) .)
    -               reduce using rule 49 (expr -> ( expr ) .)
    +               reduce using rule 49 (expr -> ( expr ) .)
    )               reduce using rule 49 (expr -> ( expr ) .)
    ;               reduce using rule 49 (expr -> ( expr ) .)
    END             reduce using rule 49 (expr -> ( expr ) .)
    ELSE            reduce using rule 49 (expr -> ( expr ) .)
    DF              reduce using rule 49 (expr -> ( expr ) .)
    ET              reduce using rule 49 (expr -> ( expr ) .)
    GE              reduce using rule 49 (expr -> ( expr ) .)
    GT              reduce using rule 49 (expr -> ( expr ) .)
    LE              reduce using rule 49 (expr -> ( expr ) .)
    LT              reduce using rule 49 (expr -> ( expr ) .)
    ,               reduce using rule 49 (expr -> ( expr ) .)
    DO              reduce using rule 49 (expr -> ( expr ) .)
    OR              reduce using rule 49 (expr -> ( expr ) .)
    AND             reduce using rule 49 (expr -> ( expr ) .)
    THEN            reduce using rule 49 (expr -> ( expr ) .)


state 91

    (41) expr -> INT ( expr . )
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    )               shift and go to state 120
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62


state 92

    (42) expr -> ID ( _3_exprlist_optional . )
    )               shift and go to state 121


state 93

    (43) _3_exprlist_optional -> exprlist .
    (67) exprlist -> exprlist . , expr
    )               reduce using rule 43 (_3_exprlist_optional -> exprlist .)
    ,               shift and go to state 122


state 94

    (66) exprlist -> expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    ,               reduce using rule 66 (exprlist -> expr .)
    )               reduce using rule 66 (exprlist -> expr .)
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62


state 95

    (45) expr -> ID [ expr . ]
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    ]               shift and go to state 123
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62


state 96

    (23) stmt -> ID ( exprlist . )
    (67) exprlist -> exprlist . , expr
    )               shift and go to state 124
    ,               shift and go to state 122


state 97

    (38) location -> ID [ expr . ]
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    ]               shift and go to state 125
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62


state 98

    (27) stmt -> BEGIN stmtlist END .
    ;               reduce using rule 27 (stmt -> BEGIN stmtlist END .)
    END             reduce using rule 27 (stmt -> BEGIN stmtlist END .)
    ELSE            reduce using rule 27 (stmt -> BEGIN stmtlist END .)


state 99

    (21) stmtlist -> stmt ; stmtlist .
    END             reduce using rule 21 (stmtlist -> stmt ; stmtlist .)


state 100

    (24) stmt -> location ASSIGNOP expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    ;               reduce using rule 24 (stmt -> location ASSIGNOP expr .)
    END             reduce using rule 24 (stmt -> location ASSIGNOP expr .)
    ELSE            reduce using rule 24 (stmt -> location ASSIGNOP expr .)
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62


state 101

    (31) stmt -> WHILE relation DO . stmt
    (23) stmt -> . ID ( exprlist )
    (24) stmt -> . location ASSIGNOP expr
    (25) stmt -> . RETURN expr
    (26) stmt -> . SKIP
    (27) stmt -> . BEGIN stmtlist END
    (28) stmt -> . instr_open
    (29) stmt -> . instr_rel
    (30) stmt -> . BREAK
    (31) stmt -> . WHILE relation DO stmt
    (32) stmt -> . READ ( location )
    (33) stmt -> . WRITE ( expr )
    (34) stmt -> . PRINT ( literal )
    (38) location -> . ID [ expr ]
    (39) location -> . ID
    (35) instr_open -> . IF relation THEN stmt ELSE stmt
    (36) instr_rel -> . IF relation THEN stmt
    ID              shift and go to state 41
    RETURN          shift and go to state 46
    SKIP            shift and go to state 47
    BEGIN           shift and go to state 42
    BREAK           shift and go to state 50
    WHILE           shift and go to state 51
    READ            shift and go to state 52
    WRITE           shift and go to state 53
    PRINT           shift and go to state 54
    IF              shift and go to state 55

    stmt                           shift and go to state 126
    location                       shift and go to state 45
    instr_open                     shift and go to state 48
    instr_rel                      shift and go to state 49

state 102

    (58) relation -> relation OR . relation
    (56) relation -> . ( relation )
    (57) relation -> . NOT relation
    (58) relation -> . relation OR relation
    (59) relation -> . relation AND relation
    (60) relation -> . expr DF expr
    (61) relation -> . expr ET expr
    (62) relation -> . expr GE expr
    (63) relation -> . expr GT expr
    (64) relation -> . expr LE expr
    (65) relation -> . expr LT expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    (               shift and go to state 78
    NOT             shift and go to state 79
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38

    relation                       shift and go to state 127
    expr                           shift and go to state 80

state 103

    (59) relation -> relation AND . relation
    (56) relation -> . ( relation )
    (57) relation -> . NOT relation
    (58) relation -> . relation OR relation
    (59) relation -> . relation AND relation
    (60) relation -> . expr DF expr
    (61) relation -> . expr ET expr
    (62) relation -> . expr GE expr
    (63) relation -> . expr GT expr
    (64) relation -> . expr LE expr
    (65) relation -> . expr LT expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    (               shift and go to state 78
    NOT             shift and go to state 79
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38

    relation                       shift and go to state 128
    expr                           shift and go to state 80

state 104

    (56) relation -> ( relation . )
    (58) relation -> relation . OR relation
    (59) relation -> relation . AND relation
    )               shift and go to state 129
    OR              shift and go to state 102
    AND             shift and go to state 103


state 105

    (49) expr -> ( expr . )
    (60) relation -> expr . DF expr
    (61) relation -> expr . ET expr
    (62) relation -> expr . GE expr
    (63) relation -> expr . GT expr
    (64) relation -> expr . LE expr
    (65) relation -> expr . LT expr
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    )               shift and go to state 90
    DF              shift and go to state 107
    ET              shift and go to state 108
    GE              shift and go to state 109
    GT              shift and go to state 110
    LE              shift and go to state 111
    LT              shift and go to state 112
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62


state 106

    (57) relation -> NOT relation .
    (58) relation -> relation . OR relation
    (59) relation -> relation . AND relation
    DO              reduce using rule 57 (relation -> NOT relation .)
    OR              reduce using rule 57 (relation -> NOT relation .)
    AND             reduce using rule 57 (relation -> NOT relation .)
    THEN            reduce using rule 57 (relation -> NOT relation .)
    )               reduce using rule 57 (relation -> NOT relation .)


state 107

    (60) relation -> expr DF . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 130

state 108

    (61) relation -> expr ET . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 131

state 109

    (62) relation -> expr GE . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 132

state 110

    (63) relation -> expr GT . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 133

state 111

    (64) relation -> expr LE . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 134

state 112

    (65) relation -> expr LT . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 135

state 113

    (32) stmt -> READ ( location . )
    )               shift and go to state 136


state 114

    (38) location -> ID . [ expr ]
    (39) location -> ID .
    [               shift and go to state 71
    )               reduce using rule 39 (location -> ID .)


state 115

    (33) stmt -> WRITE ( expr . )
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    )               shift and go to state 137
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62


state 116

    (34) stmt -> PRINT ( literal . )
    )               shift and go to state 138


state 117

    (37) literal -> STRING .
    )               reduce using rule 37 (literal -> STRING .)


state 118

    (35) instr_open -> IF relation THEN . stmt ELSE stmt
    (36) instr_rel -> IF relation THEN . stmt
    (23) stmt -> . ID ( exprlist )
    (24) stmt -> . location ASSIGNOP expr
    (25) stmt -> . RETURN expr
    (26) stmt -> . SKIP
    (27) stmt -> . BEGIN stmtlist END
    (28) stmt -> . instr_open
    (29) stmt -> . instr_rel
    (30) stmt -> . BREAK
    (31) stmt -> . WHILE relation DO stmt
    (32) stmt -> . READ ( location )
    (33) stmt -> . WRITE ( expr )
    (34) stmt -> . PRINT ( literal )
    (38) location -> . ID [ expr ]
    (39) location -> . ID
    (35) instr_open -> . IF relation THEN stmt ELSE stmt
    (36) instr_rel -> . IF relation THEN stmt
    ID              shift and go to state 41
    RETURN          shift and go to state 46
    SKIP            shift and go to state 47
    BEGIN           shift and go to state 42
    BREAK           shift and go to state 50
    WHILE           shift and go to state 51
    READ            shift and go to state 52
    WRITE           shift and go to state 53
    PRINT           shift and go to state 54
    IF              shift and go to state 55

    stmt                           shift and go to state 139
    location                       shift and go to state 45
    instr_open                     shift and go to state 48
    instr_rel                      shift and go to state 49

state 119

    (40) expr -> FLOAT ( expr ) .
    ]               reduce using rule 40 (expr -> FLOAT ( expr ) .)
    /               reduce using rule 40 (expr -> FLOAT ( expr ) .)
    *               reduce using rule 40 (expr -> FLOAT ( expr ) .)
    -               reduce using rule 40 (expr -> FLOAT ( expr ) .)
    +               reduce using rule 40 (expr -> FLOAT ( expr ) .)
    )               reduce using rule 40 (expr -> FLOAT ( expr ) .)
    ;               reduce using rule 40 (expr -> FLOAT ( expr ) .)
    END             reduce using rule 40 (expr -> FLOAT ( expr ) .)
    ELSE            reduce using rule 40 (expr -> FLOAT ( expr ) .)
    DF              reduce using rule 40 (expr -> FLOAT ( expr ) .)
    ET              reduce using rule 40 (expr -> FLOAT ( expr ) .)
    GE              reduce using rule 40 (expr -> FLOAT ( expr ) .)
    GT              reduce using rule 40 (expr -> FLOAT ( expr ) .)
    LE              reduce using rule 40 (expr -> FLOAT ( expr ) .)
    LT              reduce using rule 40 (expr -> FLOAT ( expr ) .)
    ,               reduce using rule 40 (expr -> FLOAT ( expr ) .)
    DO              reduce using rule 40 (expr -> FLOAT ( expr ) .)
    OR              reduce using rule 40 (expr -> FLOAT ( expr ) .)
    AND             reduce using rule 40 (expr -> FLOAT ( expr ) .)
    THEN            reduce using rule 40 (expr -> FLOAT ( expr ) .)


state 120

    (41) expr -> INT ( expr ) .
    ]               reduce using rule 41 (expr -> INT ( expr ) .)
    /               reduce using rule 41 (expr -> INT ( expr ) .)
    *               reduce using rule 41 (expr -> INT ( expr ) .)
    -               reduce using rule 41 (expr -> INT ( expr ) .)
    +               reduce using rule 41 (expr -> INT ( expr ) .)
    )               reduce using rule 41 (expr -> INT ( expr ) .)
    ;               reduce using rule 41 (expr -> INT ( expr ) .)
    END             reduce using rule 41 (expr -> INT ( expr ) .)
    ELSE            reduce using rule 41 (expr -> INT ( expr ) .)
    DF              reduce using rule 41 (expr -> INT ( expr ) .)
    ET              reduce using rule 41 (expr -> INT ( expr ) .)
    GE              reduce using rule 41 (expr -> INT ( expr ) .)
    GT              reduce using rule 41 (expr -> INT ( expr ) .)
    LE              reduce using rule 41 (expr -> INT ( expr ) .)
    LT              reduce using rule 41 (expr -> INT ( expr ) .)
    ,               reduce using rule 41 (expr -> INT ( expr ) .)
    DO              reduce using rule 41 (expr -> INT ( expr ) .)
    OR              reduce using rule 41 (expr -> INT ( expr ) .)
    AND             reduce using rule 41 (expr -> INT ( expr ) .)
    THEN            reduce using rule 41 (expr -> INT ( expr ) .)


state 121

    (42) expr -> ID ( _3_exprlist_optional ) .
    ]               reduce using rule 42 (expr -> ID ( _3_exprlist_optional ) .)
    /               reduce using rule 42 (expr -> ID ( _3_exprlist_optional ) .)
    *               reduce using rule 42 (expr -> ID ( _3_exprlist_optional ) .)
    -               reduce using rule 42 (expr -> ID ( _3_exprlist_optional ) .)
    +               reduce using rule 42 (expr -> ID ( _3_exprlist_optional ) .)
    )               reduce using rule 42 (expr -> ID ( _3_exprlist_optional ) .)
    ;               reduce using rule 42 (expr -> ID ( _3_exprlist_optional ) .)
    END             reduce using rule 42 (expr -> ID ( _3_exprlist_optional ) .)
    ELSE            reduce using rule 42 (expr -> ID ( _3_exprlist_optional ) .)
    DF              reduce using rule 42 (expr -> ID ( _3_exprlist_optional ) .)
    ET              reduce using rule 42 (expr -> ID ( _3_exprlist_optional ) .)
    GE              reduce using rule 42 (expr -> ID ( _3_exprlist_optional ) .)
    GT              reduce using rule 42 (expr -> ID ( _3_exprlist_optional ) .)
    LE              reduce using rule 42 (expr -> ID ( _3_exprlist_optional ) .)
    LT              reduce using rule 42 (expr -> ID ( _3_exprlist_optional ) .)
    ,               reduce using rule 42 (expr -> ID ( _3_exprlist_optional ) .)
    DO              reduce using rule 42 (expr -> ID ( _3_exprlist_optional ) .)
    OR              reduce using rule 42 (expr -> ID ( _3_exprlist_optional ) .)
    AND             reduce using rule 42 (expr -> ID ( _3_exprlist_optional ) .)
    THEN            reduce using rule 42 (expr -> ID ( _3_exprlist_optional ) .)


state 122

    (67) exprlist -> exprlist , . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _3_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 140

state 123

    (45) expr -> ID [ expr ] .
    ]               reduce using rule 45 (expr -> ID [ expr ] .)
    /               reduce using rule 45 (expr -> ID [ expr ] .)
    *               reduce using rule 45 (expr -> ID [ expr ] .)
    -               reduce using rule 45 (expr -> ID [ expr ] .)
    +               reduce using rule 45 (expr -> ID [ expr ] .)
    )               reduce using rule 45 (expr -> ID [ expr ] .)
    ;               reduce using rule 45 (expr -> ID [ expr ] .)
    END             reduce using rule 45 (expr -> ID [ expr ] .)
    ELSE            reduce using rule 45 (expr -> ID [ expr ] .)
    DF              reduce using rule 45 (expr -> ID [ expr ] .)
    ET              reduce using rule 45 (expr -> ID [ expr ] .)
    GE              reduce using rule 45 (expr -> ID [ expr ] .)
    GT              reduce using rule 45 (expr -> ID [ expr ] .)
    LE              reduce using rule 45 (expr -> ID [ expr ] .)
    LT              reduce using rule 45 (expr -> ID [ expr ] .)
    ,               reduce using rule 45 (expr -> ID [ expr ] .)
    DO              reduce using rule 45 (expr -> ID [ expr ] .)
    OR              reduce using rule 45 (expr -> ID [ expr ] .)
    AND             reduce using rule 45 (expr -> ID [ expr ] .)
    THEN            reduce using rule 45 (expr -> ID [ expr ] .)


state 124

    (23) stmt -> ID ( exprlist ) .
    ;               reduce using rule 23 (stmt -> ID ( exprlist ) .)
    END             reduce using rule 23 (stmt -> ID ( exprlist ) .)
    ELSE            reduce using rule 23 (stmt -> ID ( exprlist ) .)


state 125

    (38) location -> ID [ expr ] .
    ASSIGNOP        reduce using rule 38 (location -> ID [ expr ] .)
    )               reduce using rule 38 (location -> ID [ expr ] .)


state 126

    (31) stmt -> WHILE relation DO stmt .
    ;               reduce using rule 31 (stmt -> WHILE relation DO stmt .)
    END             reduce using rule 31 (stmt -> WHILE relation DO stmt .)
    ELSE            reduce using rule 31 (stmt -> WHILE relation DO stmt .)


state 127

    (58) relation -> relation OR relation .
    (58) relation -> relation . OR relation
    (59) relation -> relation . AND relation
    DO              reduce using rule 58 (relation -> relation OR relation .)
    OR              reduce using rule 58 (relation -> relation OR relation .)
    THEN            reduce using rule 58 (relation -> relation OR relation .)
    )               reduce using rule 58 (relation -> relation OR relation .)
    AND             shift and go to state 103


state 128

    (59) relation -> relation AND relation .
    (58) relation -> relation . OR relation
    (59) relation -> relation . AND relation
    DO              reduce using rule 59 (relation -> relation AND relation .)
    OR              reduce using rule 59 (relation -> relation AND relation .)
    AND             reduce using rule 59 (relation -> relation AND relation .)
    THEN            reduce using rule 59 (relation -> relation AND relation .)
    )               reduce using rule 59 (relation -> relation AND relation .)


state 129

    (56) relation -> ( relation ) .
    DO              reduce using rule 56 (relation -> ( relation ) .)
    OR              reduce using rule 56 (relation -> ( relation ) .)
    AND             reduce using rule 56 (relation -> ( relation ) .)
    THEN            reduce using rule 56 (relation -> ( relation ) .)
    )               reduce using rule 56 (relation -> ( relation ) .)


state 130

    (60) relation -> expr DF expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    DO              reduce using rule 60 (relation -> expr DF expr .)
    OR              reduce using rule 60 (relation -> expr DF expr .)
    AND             reduce using rule 60 (relation -> expr DF expr .)
    THEN            reduce using rule 60 (relation -> expr DF expr .)
    )               reduce using rule 60 (relation -> expr DF expr .)
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62


state 131

    (61) relation -> expr ET expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    DO              reduce using rule 61 (relation -> expr ET expr .)
    OR              reduce using rule 61 (relation -> expr ET expr .)
    AND             reduce using rule 61 (relation -> expr ET expr .)
    THEN            reduce using rule 61 (relation -> expr ET expr .)
    )               reduce using rule 61 (relation -> expr ET expr .)
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62


state 132

    (62) relation -> expr GE expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    DO              reduce using rule 62 (relation -> expr GE expr .)
    OR              reduce using rule 62 (relation -> expr GE expr .)
    AND             reduce using rule 62 (relation -> expr GE expr .)
    THEN            reduce using rule 62 (relation -> expr GE expr .)
    )               reduce using rule 62 (relation -> expr GE expr .)
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62


state 133

    (63) relation -> expr GT expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    DO              reduce using rule 63 (relation -> expr GT expr .)
    OR              reduce using rule 63 (relation -> expr GT expr .)
    AND             reduce using rule 63 (relation -> expr GT expr .)
    THEN            reduce using rule 63 (relation -> expr GT expr .)
    )               reduce using rule 63 (relation -> expr GT expr .)
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62


state 134

    (64) relation -> expr LE expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    DO              reduce using rule 64 (relation -> expr LE expr .)
    OR              reduce using rule 64 (relation -> expr LE expr .)
    AND             reduce using rule 64 (relation -> expr LE expr .)
    THEN            reduce using rule 64 (relation -> expr LE expr .)
    )               reduce using rule 64 (relation -> expr LE expr .)
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62


state 135

    (65) relation -> expr LT expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    DO              reduce using rule 65 (relation -> expr LT expr .)
    OR              reduce using rule 65 (relation -> expr LT expr .)
    AND             reduce using rule 65 (relation -> expr LT expr .)
    THEN            reduce using rule 65 (relation -> expr LT expr .)
    )               reduce using rule 65 (relation -> expr LT expr .)
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62


state 136

    (32) stmt -> READ ( location ) .
    ;               reduce using rule 32 (stmt -> READ ( location ) .)
    END             reduce using rule 32 (stmt -> READ ( location ) .)
    ELSE            reduce using rule 32 (stmt -> READ ( location ) .)


state 137

    (33) stmt -> WRITE ( expr ) .
    ;               reduce using rule 33 (stmt -> WRITE ( expr ) .)
    END             reduce using rule 33 (stmt -> WRITE ( expr ) .)
    ELSE            reduce using rule 33 (stmt -> WRITE ( expr ) .)


state 138

    (34) stmt -> PRINT ( literal ) .
    ;               reduce using rule 34 (stmt -> PRINT ( literal ) .)
    END             reduce using rule 34 (stmt -> PRINT ( literal ) .)
    ELSE            reduce using rule 34 (stmt -> PRINT ( literal ) .)


state 139

    (35) instr_open -> IF relation THEN stmt . ELSE stmt
    (36) instr_rel -> IF relation THEN stmt .
    ELSE            shift and go to state 141
    ;               reduce using rule 36 (instr_rel -> IF relation THEN stmt .)
    END             reduce using rule 36 (instr_rel -> IF relation THEN stmt .)


state 140

    (67) exprlist -> exprlist , expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    ,               reduce using rule 67 (exprlist -> exprlist , expr .)
    )               reduce using rule 67 (exprlist -> exprlist , expr .)
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62


state 141

    (35) instr_open -> IF relation THEN stmt ELSE . stmt
    (23) stmt -> . ID ( exprlist )
    (24) stmt -> . location ASSIGNOP expr
    (25) stmt -> . RETURN expr
    (26) stmt -> . SKIP
    (27) stmt -> . BEGIN stmtlist END
    (28) stmt -> . instr_open
    (29) stmt -> . instr_rel
    (30) stmt -> . BREAK
    (31) stmt -> . WHILE relation DO stmt
    (32) stmt -> . READ ( location )
    (33) stmt -> . WRITE ( expr )
    (34) stmt -> . PRINT ( literal )
    (38) location -> . ID [ expr ]
    (39) location -> . ID
    (35) instr_open -> . IF relation THEN stmt ELSE stmt
    (36) instr_rel -> . IF relation THEN stmt
    ID              shift and go to state 41
    RETURN          shift and go to state 46
    SKIP            shift and go to state 47
    BEGIN           shift and go to state 42
    BREAK           shift and go to state 50
    WHILE           shift and go to state 51
    READ            shift and go to state 52
    WRITE           shift and go to state 53
    PRINT           shift and go to state 54
    IF              shift and go to state 55

    stmt                           shift and go to state 142
    location                       shift and go to state 45
    instr_open                     shift and go to state 48
    instr_rel                      shift and go to state 49

state 142

    (35) instr_open -> IF relation THEN stmt ELSE stmt .
    ;               reduce using rule 35 (instr_open -> IF relation THEN stmt ELSE stmt .)
    END             reduce using rule 35 (instr_open -> IF relation THEN stmt ELSE stmt .)
    ELSE            reduce using rule 35 (instr_open -> IF relation THEN stmt ELSE stmt .)
