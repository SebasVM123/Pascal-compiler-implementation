Grammar:

Rule 0     S' -> program
Rule 1     program -> funclist
Rule 2     funclist -> func
Rule 3     funclist -> funclist func
Rule 4     func -> FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END
Rule 5     _1_parmlist_optional -> parmlist
Rule 6     _1_parmlist_optional -> <empty>
Rule 7     _2_locallist_optional -> locallist
Rule 8     _2_locallist_optional -> <empty>
Rule 9     parmlist -> parm
Rule 10    parmlist -> parmlist , parm
Rule 11    parm -> ID : datatype
Rule 12    datatype -> FLOAT
Rule 13    datatype -> INT
Rule 14    datatype -> FLOAT [ expr ]
Rule 15    datatype -> INT [ expr ]
Rule 16    locallist -> local ; locallist
Rule 17    locallist -> local ;
Rule 18    local -> func
Rule 19    local -> parm
Rule 20    stmtlist -> stmt ; stmtlist
Rule 21    stmtlist -> stmt
Rule 22    stmt -> ID ( exprlist )
Rule 23    stmt -> SKIP
Rule 24    stmt -> RETURN expr
Rule 25    stmt -> location ASSIGNOP expr
Rule 26    stmt -> BEGIN stmtlist END
Rule 27    stmt -> IF relation THEN stmt _3_ELSE_stmt_optional
Rule 28    _3_ELSE_stmt_optional -> ELSE stmt
Rule 29    _3_ELSE_stmt_optional -> <empty>
Rule 30    stmt -> BREAK
Rule 31    stmt -> WHILE relation DO stmt
Rule 32    stmt -> READ ( location )
Rule 33    stmt -> WRITE ( expr )
Rule 34    stmt -> PRINT ( literal )
Rule 35    literal -> FCONST
Rule 36    literal -> ICONST
Rule 37    literal -> STRING
Rule 38    location -> ID [ expr ]
Rule 39    location -> ID
Rule 40    expr -> FLOAT ( expr )
Rule 41    expr -> INT ( expr )
Rule 42    expr -> ID ( _4_exprlist_optional )
Rule 43    _4_exprlist_optional -> exprlist
Rule 44    _4_exprlist_optional -> <empty>
Rule 45    expr -> ID [ expr ]
Rule 46    expr -> ID
Rule 47    expr -> FCONST
Rule 48    expr -> ICONST
Rule 49    expr -> ( expr )
Rule 50    expr -> + expr  [precedence=right, level=7]
Rule 51    expr -> - expr  [precedence=right, level=7]
Rule 52    expr -> expr / expr  [precedence=left, level=6]
Rule 53    expr -> expr * expr  [precedence=left, level=6]
Rule 54    expr -> expr - expr  [precedence=left, level=5]
Rule 55    expr -> expr + expr  [precedence=left, level=5]
Rule 56    relation -> ( relation )
Rule 57    relation -> NOT relation  [precedence=right, level=7]
Rule 58    relation -> relation OR relation  [precedence=left, level=1]
Rule 59    relation -> relation AND relation  [precedence=left, level=2]
Rule 60    relation -> expr DF expr  [precedence=left, level=3]
Rule 61    relation -> expr ET expr  [precedence=left, level=3]
Rule 62    relation -> expr GE expr  [precedence=left, level=4]
Rule 63    relation -> expr GT expr  [precedence=left, level=4]
Rule 64    relation -> expr LE expr  [precedence=left, level=4]
Rule 65    relation -> expr LT expr  [precedence=left, level=4]
Rule 66    exprlist -> expr
Rule 67    exprlist -> exprlist , expr

Terminals, with rules where they appear:

(                    : 4 22 32 33 34 40 41 42 49 56
)                    : 4 22 32 33 34 40 41 42 49 56
*                    : 53
+                    : 50 55
,                    : 10 67
-                    : 51 54
/                    : 52
:                    : 11
;                    : 16 17 20
AND                  : 59
ASSIGNOP             : 25
BEGIN                : 4 26
BREAK                : 30
DF                   : 60
DO                   : 31
ELSE                 : 28
END                  : 4 26
ET                   : 61
FCONST               : 35 47
FLOAT                : 12 14 40
FUN                  : 4
GE                   : 62
GT                   : 63
ICONST               : 36 48
ID                   : 4 11 22 38 39 42 45 46
IF                   : 27
INT                  : 13 15 41
LE                   : 64
LT                   : 65
NOT                  : 57
OR                   : 58
PRINT                : 34
READ                 : 32
RETURN               : 24
SKIP                 : 23
STRING               : 37
THEN                 : 27
WHILE                : 31
WRITE                : 33
[                    : 14 15 38 45
]                    : 14 15 38 45
error                : 

Nonterminals, with rules where they appear:

_1_parmlist_optional : 4
_2_locallist_optional : 4
_3_ELSE_stmt_optional : 27
_4_exprlist_optional : 42
datatype             : 11
expr                 : 14 15 24 25 33 38 40 41 45 49 50 51 52 52 53 53 54 54 55 55 60 60 61 61 62 62 63 63 64 64 65 65 66 67
exprlist             : 22 43 67
func                 : 2 3 18
funclist             : 1 3
literal              : 34
local                : 16 17
locallist            : 7 16
location             : 25 32
parm                 : 9 10 19
parmlist             : 5 10
program              : 0
relation             : 27 31 56 57 58 58 59 59
stmt                 : 20 21 27 28 31
stmtlist             : 4 20 26


state 0

    (0) S' -> . program
    (1) program -> . funclist
    (2) funclist -> . func
    (3) funclist -> . funclist func
    (4) func -> . FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END
    FUN             shift and go to state 4

    program                        shift and go to state 1
    funclist                       shift and go to state 2
    func                           shift and go to state 3

state 1

    (0) S' -> program .


state 2

    (1) program -> funclist .
    (3) funclist -> funclist . func
    (4) func -> . FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END
    $end            reduce using rule 1 (program -> funclist .)
    FUN             shift and go to state 4

    func                           shift and go to state 5

state 3

    (2) funclist -> func .
    FUN             reduce using rule 2 (funclist -> func .)
    $end            reduce using rule 2 (funclist -> func .)


state 4

    (4) func -> FUN . ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END
    ID              shift and go to state 6


state 5

    (3) funclist -> funclist func .
    FUN             reduce using rule 3 (funclist -> funclist func .)
    $end            reduce using rule 3 (funclist -> funclist func .)


state 6

    (4) func -> FUN ID . ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END
    (               shift and go to state 7


state 7

    (4) func -> FUN ID ( . _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END
    (5) _1_parmlist_optional -> . parmlist
    (6) _1_parmlist_optional -> .
    (9) parmlist -> . parm
    (10) parmlist -> . parmlist , parm
    (11) parm -> . ID : datatype
    )               reduce using rule 6 (_1_parmlist_optional -> .)
    ID              shift and go to state 8

    _1_parmlist_optional           shift and go to state 9
    parmlist                       shift and go to state 10
    parm                           shift and go to state 11

state 8

    (11) parm -> ID . : datatype
    :               shift and go to state 12


state 9

    (4) func -> FUN ID ( _1_parmlist_optional . ) _2_locallist_optional BEGIN stmtlist END
    )               shift and go to state 13


state 10

    (5) _1_parmlist_optional -> parmlist .
    (10) parmlist -> parmlist . , parm
    )               reduce using rule 5 (_1_parmlist_optional -> parmlist .)
    ,               shift and go to state 14


state 11

    (9) parmlist -> parm .
    ,               reduce using rule 9 (parmlist -> parm .)
    )               reduce using rule 9 (parmlist -> parm .)


state 12

    (11) parm -> ID : . datatype
    (12) datatype -> . FLOAT
    (13) datatype -> . INT
    (14) datatype -> . FLOAT [ expr ]
    (15) datatype -> . INT [ expr ]
    FLOAT           shift and go to state 16
    INT             shift and go to state 17

    datatype                       shift and go to state 15

state 13

    (4) func -> FUN ID ( _1_parmlist_optional ) . _2_locallist_optional BEGIN stmtlist END
    (7) _2_locallist_optional -> . locallist
    (8) _2_locallist_optional -> .
    (16) locallist -> . local ; locallist
    (17) locallist -> . local ;
    (18) local -> . func
    (19) local -> . parm
    (4) func -> . FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END
    (11) parm -> . ID : datatype
    BEGIN           reduce using rule 8 (_2_locallist_optional -> .)
    FUN             shift and go to state 4
    ID              shift and go to state 8

    _2_locallist_optional          shift and go to state 18
    locallist                      shift and go to state 19
    local                          shift and go to state 20
    func                           shift and go to state 21
    parm                           shift and go to state 22

state 14

    (10) parmlist -> parmlist , . parm
    (11) parm -> . ID : datatype
    ID              shift and go to state 8

    parm                           shift and go to state 23

state 15

    (11) parm -> ID : datatype .
    ,               reduce using rule 11 (parm -> ID : datatype .)
    )               reduce using rule 11 (parm -> ID : datatype .)
    ;               reduce using rule 11 (parm -> ID : datatype .)


state 16

    (12) datatype -> FLOAT .
    (14) datatype -> FLOAT . [ expr ]
    ,               reduce using rule 12 (datatype -> FLOAT .)
    )               reduce using rule 12 (datatype -> FLOAT .)
    ;               reduce using rule 12 (datatype -> FLOAT .)
    [               shift and go to state 24


state 17

    (13) datatype -> INT .
    (15) datatype -> INT . [ expr ]
    ,               reduce using rule 13 (datatype -> INT .)
    )               reduce using rule 13 (datatype -> INT .)
    ;               reduce using rule 13 (datatype -> INT .)
    [               shift and go to state 25


state 18

    (4) func -> FUN ID ( _1_parmlist_optional ) _2_locallist_optional . BEGIN stmtlist END
    BEGIN           shift and go to state 26


state 19

    (7) _2_locallist_optional -> locallist .
    BEGIN           reduce using rule 7 (_2_locallist_optional -> locallist .)


state 20

    (16) locallist -> local . ; locallist
    (17) locallist -> local . ;
    ;               shift and go to state 27


state 21

    (18) local -> func .
    ;               reduce using rule 18 (local -> func .)


state 22

    (19) local -> parm .
    ;               reduce using rule 19 (local -> parm .)


state 23

    (10) parmlist -> parmlist , parm .
    ,               reduce using rule 10 (parmlist -> parmlist , parm .)
    )               reduce using rule 10 (parmlist -> parmlist , parm .)


state 24

    (14) datatype -> FLOAT [ . expr ]
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    (               shift and go to state 30
    +               shift and go to state 35
    -               shift and go to state 36

    expr                           shift and go to state 29

state 25

    (15) datatype -> INT [ . expr ]
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    (               shift and go to state 30
    +               shift and go to state 35
    -               shift and go to state 36

    expr                           shift and go to state 37

state 26

    (4) func -> FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN . stmtlist END
    (20) stmtlist -> . stmt ; stmtlist
    (21) stmtlist -> . stmt
    (22) stmt -> . ID ( exprlist )
    (23) stmt -> . SKIP
    (24) stmt -> . RETURN expr
    (25) stmt -> . location ASSIGNOP expr
    (26) stmt -> . BEGIN stmtlist END
    (27) stmt -> . IF relation THEN stmt _3_ELSE_stmt_optional
    (30) stmt -> . BREAK
    (31) stmt -> . WHILE relation DO stmt
    (32) stmt -> . READ ( location )
    (33) stmt -> . WRITE ( expr )
    (34) stmt -> . PRINT ( literal )
    (38) location -> . ID [ expr ]
    (39) location -> . ID
    ID              shift and go to state 38
    SKIP            shift and go to state 42
    RETURN          shift and go to state 43
    BEGIN           shift and go to state 39
    IF              shift and go to state 45
    BREAK           shift and go to state 46
    WHILE           shift and go to state 47
    READ            shift and go to state 48
    WRITE           shift and go to state 49
    PRINT           shift and go to state 50

    stmtlist                       shift and go to state 40
    stmt                           shift and go to state 41
    location                       shift and go to state 44

state 27

    (16) locallist -> local ; . locallist
    (17) locallist -> local ; .
    (16) locallist -> . local ; locallist
    (17) locallist -> . local ;
    (18) local -> . func
    (19) local -> . parm
    (4) func -> . FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END
    (11) parm -> . ID : datatype
    BEGIN           reduce using rule 17 (locallist -> local ; .)
    FUN             shift and go to state 4
    ID              shift and go to state 8

    local                          shift and go to state 20
    locallist                      shift and go to state 51
    func                           shift and go to state 21
    parm                           shift and go to state 22

state 28

    (40) expr -> FLOAT . ( expr )
    (               shift and go to state 52


state 29

    (14) datatype -> FLOAT [ expr . ]
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    ]               shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 30

    (49) expr -> ( . expr )
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    (               shift and go to state 30
    +               shift and go to state 35
    -               shift and go to state 36

    expr                           shift and go to state 58

state 31

    (41) expr -> INT . ( expr )
    (               shift and go to state 59


state 32

    (42) expr -> ID . ( _4_exprlist_optional )
    (45) expr -> ID . [ expr ]
    (46) expr -> ID .
    (               shift and go to state 60
    [               shift and go to state 61
    ]               reduce using rule 46 (expr -> ID .)
    /               reduce using rule 46 (expr -> ID .)
    *               reduce using rule 46 (expr -> ID .)
    -               reduce using rule 46 (expr -> ID .)
    +               reduce using rule 46 (expr -> ID .)
    )               reduce using rule 46 (expr -> ID .)
    ;               reduce using rule 46 (expr -> ID .)
    END             reduce using rule 46 (expr -> ID .)
    ELSE            reduce using rule 46 (expr -> ID .)
    DF              reduce using rule 46 (expr -> ID .)
    ET              reduce using rule 46 (expr -> ID .)
    GE              reduce using rule 46 (expr -> ID .)
    GT              reduce using rule 46 (expr -> ID .)
    LE              reduce using rule 46 (expr -> ID .)
    LT              reduce using rule 46 (expr -> ID .)
    ,               reduce using rule 46 (expr -> ID .)
    THEN            reduce using rule 46 (expr -> ID .)
    OR              reduce using rule 46 (expr -> ID .)
    AND             reduce using rule 46 (expr -> ID .)
    DO              reduce using rule 46 (expr -> ID .)


state 33

    (47) expr -> FCONST .
    ]               reduce using rule 47 (expr -> FCONST .)
    /               reduce using rule 47 (expr -> FCONST .)
    *               reduce using rule 47 (expr -> FCONST .)
    -               reduce using rule 47 (expr -> FCONST .)
    +               reduce using rule 47 (expr -> FCONST .)
    )               reduce using rule 47 (expr -> FCONST .)
    ;               reduce using rule 47 (expr -> FCONST .)
    END             reduce using rule 47 (expr -> FCONST .)
    ELSE            reduce using rule 47 (expr -> FCONST .)
    DF              reduce using rule 47 (expr -> FCONST .)
    ET              reduce using rule 47 (expr -> FCONST .)
    GE              reduce using rule 47 (expr -> FCONST .)
    GT              reduce using rule 47 (expr -> FCONST .)
    LE              reduce using rule 47 (expr -> FCONST .)
    LT              reduce using rule 47 (expr -> FCONST .)
    ,               reduce using rule 47 (expr -> FCONST .)
    THEN            reduce using rule 47 (expr -> FCONST .)
    OR              reduce using rule 47 (expr -> FCONST .)
    AND             reduce using rule 47 (expr -> FCONST .)
    DO              reduce using rule 47 (expr -> FCONST .)


state 34

    (48) expr -> ICONST .
    ]               reduce using rule 48 (expr -> ICONST .)
    /               reduce using rule 48 (expr -> ICONST .)
    *               reduce using rule 48 (expr -> ICONST .)
    -               reduce using rule 48 (expr -> ICONST .)
    +               reduce using rule 48 (expr -> ICONST .)
    )               reduce using rule 48 (expr -> ICONST .)
    ;               reduce using rule 48 (expr -> ICONST .)
    END             reduce using rule 48 (expr -> ICONST .)
    ELSE            reduce using rule 48 (expr -> ICONST .)
    DF              reduce using rule 48 (expr -> ICONST .)
    ET              reduce using rule 48 (expr -> ICONST .)
    GE              reduce using rule 48 (expr -> ICONST .)
    GT              reduce using rule 48 (expr -> ICONST .)
    LE              reduce using rule 48 (expr -> ICONST .)
    LT              reduce using rule 48 (expr -> ICONST .)
    ,               reduce using rule 48 (expr -> ICONST .)
    THEN            reduce using rule 48 (expr -> ICONST .)
    OR              reduce using rule 48 (expr -> ICONST .)
    AND             reduce using rule 48 (expr -> ICONST .)
    DO              reduce using rule 48 (expr -> ICONST .)


state 35

    (50) expr -> + . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    (               shift and go to state 30
    +               shift and go to state 35
    -               shift and go to state 36

    expr                           shift and go to state 62

state 36

    (51) expr -> - . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    (               shift and go to state 30
    +               shift and go to state 35
    -               shift and go to state 36

    expr                           shift and go to state 63

state 37

    (15) datatype -> INT [ expr . ]
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    ]               shift and go to state 64
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 38

    (22) stmt -> ID . ( exprlist )
    (38) location -> ID . [ expr ]
    (39) location -> ID .
    (               shift and go to state 65
    [               shift and go to state 66
    ASSIGNOP        reduce using rule 39 (location -> ID .)


state 39

    (26) stmt -> BEGIN . stmtlist END
    (20) stmtlist -> . stmt ; stmtlist
    (21) stmtlist -> . stmt
    (22) stmt -> . ID ( exprlist )
    (23) stmt -> . SKIP
    (24) stmt -> . RETURN expr
    (25) stmt -> . location ASSIGNOP expr
    (26) stmt -> . BEGIN stmtlist END
    (27) stmt -> . IF relation THEN stmt _3_ELSE_stmt_optional
    (30) stmt -> . BREAK
    (31) stmt -> . WHILE relation DO stmt
    (32) stmt -> . READ ( location )
    (33) stmt -> . WRITE ( expr )
    (34) stmt -> . PRINT ( literal )
    (38) location -> . ID [ expr ]
    (39) location -> . ID
    ID              shift and go to state 38
    SKIP            shift and go to state 42
    RETURN          shift and go to state 43
    BEGIN           shift and go to state 39
    IF              shift and go to state 45
    BREAK           shift and go to state 46
    WHILE           shift and go to state 47
    READ            shift and go to state 48
    WRITE           shift and go to state 49
    PRINT           shift and go to state 50

    stmtlist                       shift and go to state 67
    stmt                           shift and go to state 41
    location                       shift and go to state 44

state 40

    (4) func -> FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist . END
    END             shift and go to state 68


state 41

    (20) stmtlist -> stmt . ; stmtlist
    (21) stmtlist -> stmt .
    ;               shift and go to state 69
    END             reduce using rule 21 (stmtlist -> stmt .)


state 42

    (23) stmt -> SKIP .
    ;               reduce using rule 23 (stmt -> SKIP .)
    END             reduce using rule 23 (stmt -> SKIP .)
    ELSE            reduce using rule 23 (stmt -> SKIP .)


state 43

    (24) stmt -> RETURN . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    (               shift and go to state 30
    +               shift and go to state 35
    -               shift and go to state 36

    expr                           shift and go to state 70

state 44

    (25) stmt -> location . ASSIGNOP expr
    ASSIGNOP        shift and go to state 71


state 45

    (27) stmt -> IF . relation THEN stmt _3_ELSE_stmt_optional
    (56) relation -> . ( relation )
    (57) relation -> . NOT relation
    (58) relation -> . relation OR relation
    (59) relation -> . relation AND relation
    (60) relation -> . expr DF expr
    (61) relation -> . expr ET expr
    (62) relation -> . expr GE expr
    (63) relation -> . expr GT expr
    (64) relation -> . expr LE expr
    (65) relation -> . expr LT expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    (               shift and go to state 73
    NOT             shift and go to state 74
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    +               shift and go to state 35
    -               shift and go to state 36

    relation                       shift and go to state 72
    expr                           shift and go to state 75

state 46

    (30) stmt -> BREAK .
    ;               reduce using rule 30 (stmt -> BREAK .)
    END             reduce using rule 30 (stmt -> BREAK .)
    ELSE            reduce using rule 30 (stmt -> BREAK .)


state 47

    (31) stmt -> WHILE . relation DO stmt
    (56) relation -> . ( relation )
    (57) relation -> . NOT relation
    (58) relation -> . relation OR relation
    (59) relation -> . relation AND relation
    (60) relation -> . expr DF expr
    (61) relation -> . expr ET expr
    (62) relation -> . expr GE expr
    (63) relation -> . expr GT expr
    (64) relation -> . expr LE expr
    (65) relation -> . expr LT expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    (               shift and go to state 73
    NOT             shift and go to state 74
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    +               shift and go to state 35
    -               shift and go to state 36

    relation                       shift and go to state 76
    expr                           shift and go to state 75

state 48

    (32) stmt -> READ . ( location )
    (               shift and go to state 77


state 49

    (33) stmt -> WRITE . ( expr )
    (               shift and go to state 78


state 50

    (34) stmt -> PRINT . ( literal )
    (               shift and go to state 79


state 51

    (16) locallist -> local ; locallist .
    BEGIN           reduce using rule 16 (locallist -> local ; locallist .)


state 52

    (40) expr -> FLOAT ( . expr )
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    (               shift and go to state 30
    +               shift and go to state 35
    -               shift and go to state 36

    expr                           shift and go to state 80

state 53

    (14) datatype -> FLOAT [ expr ] .
    ,               reduce using rule 14 (datatype -> FLOAT [ expr ] .)
    )               reduce using rule 14 (datatype -> FLOAT [ expr ] .)
    ;               reduce using rule 14 (datatype -> FLOAT [ expr ] .)


state 54

    (52) expr -> expr / . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    (               shift and go to state 30
    +               shift and go to state 35
    -               shift and go to state 36

    expr                           shift and go to state 81

state 55

    (53) expr -> expr * . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    (               shift and go to state 30
    +               shift and go to state 35
    -               shift and go to state 36

    expr                           shift and go to state 82

state 56

    (54) expr -> expr - . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    (               shift and go to state 30
    +               shift and go to state 35
    -               shift and go to state 36

    expr                           shift and go to state 83

state 57

    (55) expr -> expr + . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    (               shift and go to state 30
    +               shift and go to state 35
    -               shift and go to state 36

    expr                           shift and go to state 84

state 58

    (49) expr -> ( expr . )
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    )               shift and go to state 85
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 59

    (41) expr -> INT ( . expr )
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    (               shift and go to state 30
    +               shift and go to state 35
    -               shift and go to state 36

    expr                           shift and go to state 86

state 60

    (42) expr -> ID ( . _4_exprlist_optional )
    (43) _4_exprlist_optional -> . exprlist
    (44) _4_exprlist_optional -> .
    (66) exprlist -> . expr
    (67) exprlist -> . exprlist , expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    )               reduce using rule 44 (_4_exprlist_optional -> .)
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    (               shift and go to state 30
    +               shift and go to state 35
    -               shift and go to state 36

    _4_exprlist_optional           shift and go to state 87
    exprlist                       shift and go to state 88
    expr                           shift and go to state 89

state 61

    (45) expr -> ID [ . expr ]
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    (               shift and go to state 30
    +               shift and go to state 35
    -               shift and go to state 36

    expr                           shift and go to state 90

state 62

    (50) expr -> + expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    ]               reduce using rule 50 (expr -> + expr .)
    /               reduce using rule 50 (expr -> + expr .)
    *               reduce using rule 50 (expr -> + expr .)
    -               reduce using rule 50 (expr -> + expr .)
    +               reduce using rule 50 (expr -> + expr .)
    )               reduce using rule 50 (expr -> + expr .)
    ;               reduce using rule 50 (expr -> + expr .)
    END             reduce using rule 50 (expr -> + expr .)
    ELSE            reduce using rule 50 (expr -> + expr .)
    DF              reduce using rule 50 (expr -> + expr .)
    ET              reduce using rule 50 (expr -> + expr .)
    GE              reduce using rule 50 (expr -> + expr .)
    GT              reduce using rule 50 (expr -> + expr .)
    LE              reduce using rule 50 (expr -> + expr .)
    LT              reduce using rule 50 (expr -> + expr .)
    ,               reduce using rule 50 (expr -> + expr .)
    THEN            reduce using rule 50 (expr -> + expr .)
    OR              reduce using rule 50 (expr -> + expr .)
    AND             reduce using rule 50 (expr -> + expr .)
    DO              reduce using rule 50 (expr -> + expr .)


state 63

    (51) expr -> - expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    ]               reduce using rule 51 (expr -> - expr .)
    /               reduce using rule 51 (expr -> - expr .)
    *               reduce using rule 51 (expr -> - expr .)
    -               reduce using rule 51 (expr -> - expr .)
    +               reduce using rule 51 (expr -> - expr .)
    )               reduce using rule 51 (expr -> - expr .)
    ;               reduce using rule 51 (expr -> - expr .)
    END             reduce using rule 51 (expr -> - expr .)
    ELSE            reduce using rule 51 (expr -> - expr .)
    DF              reduce using rule 51 (expr -> - expr .)
    ET              reduce using rule 51 (expr -> - expr .)
    GE              reduce using rule 51 (expr -> - expr .)
    GT              reduce using rule 51 (expr -> - expr .)
    LE              reduce using rule 51 (expr -> - expr .)
    LT              reduce using rule 51 (expr -> - expr .)
    ,               reduce using rule 51 (expr -> - expr .)
    THEN            reduce using rule 51 (expr -> - expr .)
    OR              reduce using rule 51 (expr -> - expr .)
    AND             reduce using rule 51 (expr -> - expr .)
    DO              reduce using rule 51 (expr -> - expr .)


state 64

    (15) datatype -> INT [ expr ] .
    ,               reduce using rule 15 (datatype -> INT [ expr ] .)
    )               reduce using rule 15 (datatype -> INT [ expr ] .)
    ;               reduce using rule 15 (datatype -> INT [ expr ] .)


state 65

    (22) stmt -> ID ( . exprlist )
    (66) exprlist -> . expr
    (67) exprlist -> . exprlist , expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    (               shift and go to state 30
    +               shift and go to state 35
    -               shift and go to state 36

    exprlist                       shift and go to state 91
    expr                           shift and go to state 89

state 66

    (38) location -> ID [ . expr ]
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    (               shift and go to state 30
    +               shift and go to state 35
    -               shift and go to state 36

    expr                           shift and go to state 92

state 67

    (26) stmt -> BEGIN stmtlist . END
    END             shift and go to state 93


state 68

    (4) func -> FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END .
    FUN             reduce using rule 4 (func -> FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END .)
    $end            reduce using rule 4 (func -> FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END .)
    ;               reduce using rule 4 (func -> FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END .)


state 69

    (20) stmtlist -> stmt ; . stmtlist
    (20) stmtlist -> . stmt ; stmtlist
    (21) stmtlist -> . stmt
    (22) stmt -> . ID ( exprlist )
    (23) stmt -> . SKIP
    (24) stmt -> . RETURN expr
    (25) stmt -> . location ASSIGNOP expr
    (26) stmt -> . BEGIN stmtlist END
    (27) stmt -> . IF relation THEN stmt _3_ELSE_stmt_optional
    (30) stmt -> . BREAK
    (31) stmt -> . WHILE relation DO stmt
    (32) stmt -> . READ ( location )
    (33) stmt -> . WRITE ( expr )
    (34) stmt -> . PRINT ( literal )
    (38) location -> . ID [ expr ]
    (39) location -> . ID
    ID              shift and go to state 38
    SKIP            shift and go to state 42
    RETURN          shift and go to state 43
    BEGIN           shift and go to state 39
    IF              shift and go to state 45
    BREAK           shift and go to state 46
    WHILE           shift and go to state 47
    READ            shift and go to state 48
    WRITE           shift and go to state 49
    PRINT           shift and go to state 50

    stmt                           shift and go to state 41
    stmtlist                       shift and go to state 94
    location                       shift and go to state 44

state 70

    (24) stmt -> RETURN expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    ;               reduce using rule 24 (stmt -> RETURN expr .)
    END             reduce using rule 24 (stmt -> RETURN expr .)
    ELSE            reduce using rule 24 (stmt -> RETURN expr .)
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 71

    (25) stmt -> location ASSIGNOP . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    (               shift and go to state 30
    +               shift and go to state 35
    -               shift and go to state 36

    expr                           shift and go to state 95

state 72

    (27) stmt -> IF relation . THEN stmt _3_ELSE_stmt_optional
    (58) relation -> relation . OR relation
    (59) relation -> relation . AND relation
    THEN            shift and go to state 96
    OR              shift and go to state 97
    AND             shift and go to state 98


state 73

    (56) relation -> ( . relation )
    (49) expr -> ( . expr )
    (56) relation -> . ( relation )
    (57) relation -> . NOT relation
    (58) relation -> . relation OR relation
    (59) relation -> . relation AND relation
    (60) relation -> . expr DF expr
    (61) relation -> . expr ET expr
    (62) relation -> . expr GE expr
    (63) relation -> . expr GT expr
    (64) relation -> . expr LE expr
    (65) relation -> . expr LT expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    (               shift and go to state 73
    NOT             shift and go to state 74
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    +               shift and go to state 35
    -               shift and go to state 36

    relation                       shift and go to state 99
    expr                           shift and go to state 100

state 74

    (57) relation -> NOT . relation
    (56) relation -> . ( relation )
    (57) relation -> . NOT relation
    (58) relation -> . relation OR relation
    (59) relation -> . relation AND relation
    (60) relation -> . expr DF expr
    (61) relation -> . expr ET expr
    (62) relation -> . expr GE expr
    (63) relation -> . expr GT expr
    (64) relation -> . expr LE expr
    (65) relation -> . expr LT expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    (               shift and go to state 73
    NOT             shift and go to state 74
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    +               shift and go to state 35
    -               shift and go to state 36

    relation                       shift and go to state 101
    expr                           shift and go to state 75

state 75

    (60) relation -> expr . DF expr
    (61) relation -> expr . ET expr
    (62) relation -> expr . GE expr
    (63) relation -> expr . GT expr
    (64) relation -> expr . LE expr
    (65) relation -> expr . LT expr
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    DF              shift and go to state 102
    ET              shift and go to state 103
    GE              shift and go to state 104
    GT              shift and go to state 105
    LE              shift and go to state 106
    LT              shift and go to state 107
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 76

    (31) stmt -> WHILE relation . DO stmt
    (58) relation -> relation . OR relation
    (59) relation -> relation . AND relation
    DO              shift and go to state 108
    OR              shift and go to state 97
    AND             shift and go to state 98


state 77

    (32) stmt -> READ ( . location )
    (38) location -> . ID [ expr ]
    (39) location -> . ID
    ID              shift and go to state 110

    location                       shift and go to state 109

state 78

    (33) stmt -> WRITE ( . expr )
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    (               shift and go to state 30
    +               shift and go to state 35
    -               shift and go to state 36

    expr                           shift and go to state 111

state 79

    (34) stmt -> PRINT ( . literal )
    (35) literal -> . FCONST
    (36) literal -> . ICONST
    (37) literal -> . STRING
    FCONST          shift and go to state 113
    ICONST          shift and go to state 114
    STRING          shift and go to state 115

    literal                        shift and go to state 112

state 80

    (40) expr -> FLOAT ( expr . )
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    )               shift and go to state 116
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 81

    (52) expr -> expr / expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    ]               reduce using rule 52 (expr -> expr / expr .)
    /               reduce using rule 52 (expr -> expr / expr .)
    *               reduce using rule 52 (expr -> expr / expr .)
    -               reduce using rule 52 (expr -> expr / expr .)
    +               reduce using rule 52 (expr -> expr / expr .)
    )               reduce using rule 52 (expr -> expr / expr .)
    ;               reduce using rule 52 (expr -> expr / expr .)
    END             reduce using rule 52 (expr -> expr / expr .)
    ELSE            reduce using rule 52 (expr -> expr / expr .)
    DF              reduce using rule 52 (expr -> expr / expr .)
    ET              reduce using rule 52 (expr -> expr / expr .)
    GE              reduce using rule 52 (expr -> expr / expr .)
    GT              reduce using rule 52 (expr -> expr / expr .)
    LE              reduce using rule 52 (expr -> expr / expr .)
    LT              reduce using rule 52 (expr -> expr / expr .)
    ,               reduce using rule 52 (expr -> expr / expr .)
    THEN            reduce using rule 52 (expr -> expr / expr .)
    OR              reduce using rule 52 (expr -> expr / expr .)
    AND             reduce using rule 52 (expr -> expr / expr .)
    DO              reduce using rule 52 (expr -> expr / expr .)


state 82

    (53) expr -> expr * expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    ]               reduce using rule 53 (expr -> expr * expr .)
    /               reduce using rule 53 (expr -> expr * expr .)
    *               reduce using rule 53 (expr -> expr * expr .)
    -               reduce using rule 53 (expr -> expr * expr .)
    +               reduce using rule 53 (expr -> expr * expr .)
    )               reduce using rule 53 (expr -> expr * expr .)
    ;               reduce using rule 53 (expr -> expr * expr .)
    END             reduce using rule 53 (expr -> expr * expr .)
    ELSE            reduce using rule 53 (expr -> expr * expr .)
    DF              reduce using rule 53 (expr -> expr * expr .)
    ET              reduce using rule 53 (expr -> expr * expr .)
    GE              reduce using rule 53 (expr -> expr * expr .)
    GT              reduce using rule 53 (expr -> expr * expr .)
    LE              reduce using rule 53 (expr -> expr * expr .)
    LT              reduce using rule 53 (expr -> expr * expr .)
    ,               reduce using rule 53 (expr -> expr * expr .)
    THEN            reduce using rule 53 (expr -> expr * expr .)
    OR              reduce using rule 53 (expr -> expr * expr .)
    AND             reduce using rule 53 (expr -> expr * expr .)
    DO              reduce using rule 53 (expr -> expr * expr .)


state 83

    (54) expr -> expr - expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    ]               reduce using rule 54 (expr -> expr - expr .)
    -               reduce using rule 54 (expr -> expr - expr .)
    +               reduce using rule 54 (expr -> expr - expr .)
    )               reduce using rule 54 (expr -> expr - expr .)
    ;               reduce using rule 54 (expr -> expr - expr .)
    END             reduce using rule 54 (expr -> expr - expr .)
    ELSE            reduce using rule 54 (expr -> expr - expr .)
    DF              reduce using rule 54 (expr -> expr - expr .)
    ET              reduce using rule 54 (expr -> expr - expr .)
    GE              reduce using rule 54 (expr -> expr - expr .)
    GT              reduce using rule 54 (expr -> expr - expr .)
    LE              reduce using rule 54 (expr -> expr - expr .)
    LT              reduce using rule 54 (expr -> expr - expr .)
    ,               reduce using rule 54 (expr -> expr - expr .)
    THEN            reduce using rule 54 (expr -> expr - expr .)
    OR              reduce using rule 54 (expr -> expr - expr .)
    AND             reduce using rule 54 (expr -> expr - expr .)
    DO              reduce using rule 54 (expr -> expr - expr .)
    /               shift and go to state 54
    *               shift and go to state 55


state 84

    (55) expr -> expr + expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    ]               reduce using rule 55 (expr -> expr + expr .)
    -               reduce using rule 55 (expr -> expr + expr .)
    +               reduce using rule 55 (expr -> expr + expr .)
    )               reduce using rule 55 (expr -> expr + expr .)
    ;               reduce using rule 55 (expr -> expr + expr .)
    END             reduce using rule 55 (expr -> expr + expr .)
    ELSE            reduce using rule 55 (expr -> expr + expr .)
    DF              reduce using rule 55 (expr -> expr + expr .)
    ET              reduce using rule 55 (expr -> expr + expr .)
    GE              reduce using rule 55 (expr -> expr + expr .)
    GT              reduce using rule 55 (expr -> expr + expr .)
    LE              reduce using rule 55 (expr -> expr + expr .)
    LT              reduce using rule 55 (expr -> expr + expr .)
    ,               reduce using rule 55 (expr -> expr + expr .)
    THEN            reduce using rule 55 (expr -> expr + expr .)
    OR              reduce using rule 55 (expr -> expr + expr .)
    AND             reduce using rule 55 (expr -> expr + expr .)
    DO              reduce using rule 55 (expr -> expr + expr .)
    /               shift and go to state 54
    *               shift and go to state 55


state 85

    (49) expr -> ( expr ) .
    ]               reduce using rule 49 (expr -> ( expr ) .)
    /               reduce using rule 49 (expr -> ( expr ) .)
    *               reduce using rule 49 (expr -> ( expr ) .)
    -               reduce using rule 49 (expr -> ( expr ) .)
    +               reduce using rule 49 (expr -> ( expr ) .)
    )               reduce using rule 49 (expr -> ( expr ) .)
    ;               reduce using rule 49 (expr -> ( expr ) .)
    END             reduce using rule 49 (expr -> ( expr ) .)
    ELSE            reduce using rule 49 (expr -> ( expr ) .)
    DF              reduce using rule 49 (expr -> ( expr ) .)
    ET              reduce using rule 49 (expr -> ( expr ) .)
    GE              reduce using rule 49 (expr -> ( expr ) .)
    GT              reduce using rule 49 (expr -> ( expr ) .)
    LE              reduce using rule 49 (expr -> ( expr ) .)
    LT              reduce using rule 49 (expr -> ( expr ) .)
    ,               reduce using rule 49 (expr -> ( expr ) .)
    THEN            reduce using rule 49 (expr -> ( expr ) .)
    OR              reduce using rule 49 (expr -> ( expr ) .)
    AND             reduce using rule 49 (expr -> ( expr ) .)
    DO              reduce using rule 49 (expr -> ( expr ) .)


state 86

    (41) expr -> INT ( expr . )
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    )               shift and go to state 117
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 87

    (42) expr -> ID ( _4_exprlist_optional . )
    )               shift and go to state 118


state 88

    (43) _4_exprlist_optional -> exprlist .
    (67) exprlist -> exprlist . , expr
    )               reduce using rule 43 (_4_exprlist_optional -> exprlist .)
    ,               shift and go to state 119


state 89

    (66) exprlist -> expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    ,               reduce using rule 66 (exprlist -> expr .)
    )               reduce using rule 66 (exprlist -> expr .)
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 90

    (45) expr -> ID [ expr . ]
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    ]               shift and go to state 120
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 91

    (22) stmt -> ID ( exprlist . )
    (67) exprlist -> exprlist . , expr
    )               shift and go to state 121
    ,               shift and go to state 119


state 92

    (38) location -> ID [ expr . ]
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    ]               shift and go to state 122
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 93

    (26) stmt -> BEGIN stmtlist END .
    ;               reduce using rule 26 (stmt -> BEGIN stmtlist END .)
    END             reduce using rule 26 (stmt -> BEGIN stmtlist END .)
    ELSE            reduce using rule 26 (stmt -> BEGIN stmtlist END .)


state 94

    (20) stmtlist -> stmt ; stmtlist .
    END             reduce using rule 20 (stmtlist -> stmt ; stmtlist .)


state 95

    (25) stmt -> location ASSIGNOP expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    ;               reduce using rule 25 (stmt -> location ASSIGNOP expr .)
    END             reduce using rule 25 (stmt -> location ASSIGNOP expr .)
    ELSE            reduce using rule 25 (stmt -> location ASSIGNOP expr .)
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 96

    (27) stmt -> IF relation THEN . stmt _3_ELSE_stmt_optional
    (22) stmt -> . ID ( exprlist )
    (23) stmt -> . SKIP
    (24) stmt -> . RETURN expr
    (25) stmt -> . location ASSIGNOP expr
    (26) stmt -> . BEGIN stmtlist END
    (27) stmt -> . IF relation THEN stmt _3_ELSE_stmt_optional
    (30) stmt -> . BREAK
    (31) stmt -> . WHILE relation DO stmt
    (32) stmt -> . READ ( location )
    (33) stmt -> . WRITE ( expr )
    (34) stmt -> . PRINT ( literal )
    (38) location -> . ID [ expr ]
    (39) location -> . ID
    ID              shift and go to state 38
    SKIP            shift and go to state 42
    RETURN          shift and go to state 43
    BEGIN           shift and go to state 39
    IF              shift and go to state 45
    BREAK           shift and go to state 46
    WHILE           shift and go to state 47
    READ            shift and go to state 48
    WRITE           shift and go to state 49
    PRINT           shift and go to state 50

    stmt                           shift and go to state 123
    location                       shift and go to state 44

state 97

    (58) relation -> relation OR . relation
    (56) relation -> . ( relation )
    (57) relation -> . NOT relation
    (58) relation -> . relation OR relation
    (59) relation -> . relation AND relation
    (60) relation -> . expr DF expr
    (61) relation -> . expr ET expr
    (62) relation -> . expr GE expr
    (63) relation -> . expr GT expr
    (64) relation -> . expr LE expr
    (65) relation -> . expr LT expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    (               shift and go to state 73
    NOT             shift and go to state 74
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    +               shift and go to state 35
    -               shift and go to state 36

    relation                       shift and go to state 124
    expr                           shift and go to state 75

state 98

    (59) relation -> relation AND . relation
    (56) relation -> . ( relation )
    (57) relation -> . NOT relation
    (58) relation -> . relation OR relation
    (59) relation -> . relation AND relation
    (60) relation -> . expr DF expr
    (61) relation -> . expr ET expr
    (62) relation -> . expr GE expr
    (63) relation -> . expr GT expr
    (64) relation -> . expr LE expr
    (65) relation -> . expr LT expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    (               shift and go to state 73
    NOT             shift and go to state 74
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    +               shift and go to state 35
    -               shift and go to state 36

    relation                       shift and go to state 125
    expr                           shift and go to state 75

state 99

    (56) relation -> ( relation . )
    (58) relation -> relation . OR relation
    (59) relation -> relation . AND relation
    )               shift and go to state 126
    OR              shift and go to state 97
    AND             shift and go to state 98


state 100

    (49) expr -> ( expr . )
    (60) relation -> expr . DF expr
    (61) relation -> expr . ET expr
    (62) relation -> expr . GE expr
    (63) relation -> expr . GT expr
    (64) relation -> expr . LE expr
    (65) relation -> expr . LT expr
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    )               shift and go to state 85
    DF              shift and go to state 102
    ET              shift and go to state 103
    GE              shift and go to state 104
    GT              shift and go to state 105
    LE              shift and go to state 106
    LT              shift and go to state 107
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 101

    (57) relation -> NOT relation .
    (58) relation -> relation . OR relation
    (59) relation -> relation . AND relation
    THEN            reduce using rule 57 (relation -> NOT relation .)
    OR              reduce using rule 57 (relation -> NOT relation .)
    AND             reduce using rule 57 (relation -> NOT relation .)
    DO              reduce using rule 57 (relation -> NOT relation .)
    )               reduce using rule 57 (relation -> NOT relation .)


state 102

    (60) relation -> expr DF . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    (               shift and go to state 30
    +               shift and go to state 35
    -               shift and go to state 36

    expr                           shift and go to state 127

state 103

    (61) relation -> expr ET . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    (               shift and go to state 30
    +               shift and go to state 35
    -               shift and go to state 36

    expr                           shift and go to state 128

state 104

    (62) relation -> expr GE . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    (               shift and go to state 30
    +               shift and go to state 35
    -               shift and go to state 36

    expr                           shift and go to state 129

state 105

    (63) relation -> expr GT . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    (               shift and go to state 30
    +               shift and go to state 35
    -               shift and go to state 36

    expr                           shift and go to state 130

state 106

    (64) relation -> expr LE . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    (               shift and go to state 30
    +               shift and go to state 35
    -               shift and go to state 36

    expr                           shift and go to state 131

state 107

    (65) relation -> expr LT . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    (               shift and go to state 30
    +               shift and go to state 35
    -               shift and go to state 36

    expr                           shift and go to state 132

state 108

    (31) stmt -> WHILE relation DO . stmt
    (22) stmt -> . ID ( exprlist )
    (23) stmt -> . SKIP
    (24) stmt -> . RETURN expr
    (25) stmt -> . location ASSIGNOP expr
    (26) stmt -> . BEGIN stmtlist END
    (27) stmt -> . IF relation THEN stmt _3_ELSE_stmt_optional
    (30) stmt -> . BREAK
    (31) stmt -> . WHILE relation DO stmt
    (32) stmt -> . READ ( location )
    (33) stmt -> . WRITE ( expr )
    (34) stmt -> . PRINT ( literal )
    (38) location -> . ID [ expr ]
    (39) location -> . ID
    ID              shift and go to state 38
    SKIP            shift and go to state 42
    RETURN          shift and go to state 43
    BEGIN           shift and go to state 39
    IF              shift and go to state 45
    BREAK           shift and go to state 46
    WHILE           shift and go to state 47
    READ            shift and go to state 48
    WRITE           shift and go to state 49
    PRINT           shift and go to state 50

    stmt                           shift and go to state 133
    location                       shift and go to state 44

state 109

    (32) stmt -> READ ( location . )
    )               shift and go to state 134


state 110

    (38) location -> ID . [ expr ]
    (39) location -> ID .
    [               shift and go to state 66
    )               reduce using rule 39 (location -> ID .)


state 111

    (33) stmt -> WRITE ( expr . )
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    )               shift and go to state 135
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 112

    (34) stmt -> PRINT ( literal . )
    )               shift and go to state 136


state 113

    (35) literal -> FCONST .
    )               reduce using rule 35 (literal -> FCONST .)


state 114

    (36) literal -> ICONST .
    )               reduce using rule 36 (literal -> ICONST .)


state 115

    (37) literal -> STRING .
    )               reduce using rule 37 (literal -> STRING .)


state 116

    (40) expr -> FLOAT ( expr ) .
    ]               reduce using rule 40 (expr -> FLOAT ( expr ) .)
    /               reduce using rule 40 (expr -> FLOAT ( expr ) .)
    *               reduce using rule 40 (expr -> FLOAT ( expr ) .)
    -               reduce using rule 40 (expr -> FLOAT ( expr ) .)
    +               reduce using rule 40 (expr -> FLOAT ( expr ) .)
    )               reduce using rule 40 (expr -> FLOAT ( expr ) .)
    ;               reduce using rule 40 (expr -> FLOAT ( expr ) .)
    END             reduce using rule 40 (expr -> FLOAT ( expr ) .)
    ELSE            reduce using rule 40 (expr -> FLOAT ( expr ) .)
    DF              reduce using rule 40 (expr -> FLOAT ( expr ) .)
    ET              reduce using rule 40 (expr -> FLOAT ( expr ) .)
    GE              reduce using rule 40 (expr -> FLOAT ( expr ) .)
    GT              reduce using rule 40 (expr -> FLOAT ( expr ) .)
    LE              reduce using rule 40 (expr -> FLOAT ( expr ) .)
    LT              reduce using rule 40 (expr -> FLOAT ( expr ) .)
    ,               reduce using rule 40 (expr -> FLOAT ( expr ) .)
    THEN            reduce using rule 40 (expr -> FLOAT ( expr ) .)
    OR              reduce using rule 40 (expr -> FLOAT ( expr ) .)
    AND             reduce using rule 40 (expr -> FLOAT ( expr ) .)
    DO              reduce using rule 40 (expr -> FLOAT ( expr ) .)


state 117

    (41) expr -> INT ( expr ) .
    ]               reduce using rule 41 (expr -> INT ( expr ) .)
    /               reduce using rule 41 (expr -> INT ( expr ) .)
    *               reduce using rule 41 (expr -> INT ( expr ) .)
    -               reduce using rule 41 (expr -> INT ( expr ) .)
    +               reduce using rule 41 (expr -> INT ( expr ) .)
    )               reduce using rule 41 (expr -> INT ( expr ) .)
    ;               reduce using rule 41 (expr -> INT ( expr ) .)
    END             reduce using rule 41 (expr -> INT ( expr ) .)
    ELSE            reduce using rule 41 (expr -> INT ( expr ) .)
    DF              reduce using rule 41 (expr -> INT ( expr ) .)
    ET              reduce using rule 41 (expr -> INT ( expr ) .)
    GE              reduce using rule 41 (expr -> INT ( expr ) .)
    GT              reduce using rule 41 (expr -> INT ( expr ) .)
    LE              reduce using rule 41 (expr -> INT ( expr ) .)
    LT              reduce using rule 41 (expr -> INT ( expr ) .)
    ,               reduce using rule 41 (expr -> INT ( expr ) .)
    THEN            reduce using rule 41 (expr -> INT ( expr ) .)
    OR              reduce using rule 41 (expr -> INT ( expr ) .)
    AND             reduce using rule 41 (expr -> INT ( expr ) .)
    DO              reduce using rule 41 (expr -> INT ( expr ) .)


state 118

    (42) expr -> ID ( _4_exprlist_optional ) .
    ]               reduce using rule 42 (expr -> ID ( _4_exprlist_optional ) .)
    /               reduce using rule 42 (expr -> ID ( _4_exprlist_optional ) .)
    *               reduce using rule 42 (expr -> ID ( _4_exprlist_optional ) .)
    -               reduce using rule 42 (expr -> ID ( _4_exprlist_optional ) .)
    +               reduce using rule 42 (expr -> ID ( _4_exprlist_optional ) .)
    )               reduce using rule 42 (expr -> ID ( _4_exprlist_optional ) .)
    ;               reduce using rule 42 (expr -> ID ( _4_exprlist_optional ) .)
    END             reduce using rule 42 (expr -> ID ( _4_exprlist_optional ) .)
    ELSE            reduce using rule 42 (expr -> ID ( _4_exprlist_optional ) .)
    DF              reduce using rule 42 (expr -> ID ( _4_exprlist_optional ) .)
    ET              reduce using rule 42 (expr -> ID ( _4_exprlist_optional ) .)
    GE              reduce using rule 42 (expr -> ID ( _4_exprlist_optional ) .)
    GT              reduce using rule 42 (expr -> ID ( _4_exprlist_optional ) .)
    LE              reduce using rule 42 (expr -> ID ( _4_exprlist_optional ) .)
    LT              reduce using rule 42 (expr -> ID ( _4_exprlist_optional ) .)
    ,               reduce using rule 42 (expr -> ID ( _4_exprlist_optional ) .)
    THEN            reduce using rule 42 (expr -> ID ( _4_exprlist_optional ) .)
    OR              reduce using rule 42 (expr -> ID ( _4_exprlist_optional ) .)
    AND             reduce using rule 42 (expr -> ID ( _4_exprlist_optional ) .)
    DO              reduce using rule 42 (expr -> ID ( _4_exprlist_optional ) .)


state 119

    (67) exprlist -> exprlist , . expr
    (40) expr -> . FLOAT ( expr )
    (41) expr -> . INT ( expr )
    (42) expr -> . ID ( _4_exprlist_optional )
    (45) expr -> . ID [ expr ]
    (46) expr -> . ID
    (47) expr -> . FCONST
    (48) expr -> . ICONST
    (49) expr -> . ( expr )
    (50) expr -> . + expr
    (51) expr -> . - expr
    (52) expr -> . expr / expr
    (53) expr -> . expr * expr
    (54) expr -> . expr - expr
    (55) expr -> . expr + expr
    FLOAT           shift and go to state 28
    INT             shift and go to state 31
    ID              shift and go to state 32
    FCONST          shift and go to state 33
    ICONST          shift and go to state 34
    (               shift and go to state 30
    +               shift and go to state 35
    -               shift and go to state 36

    expr                           shift and go to state 137

state 120

    (45) expr -> ID [ expr ] .
    ]               reduce using rule 45 (expr -> ID [ expr ] .)
    /               reduce using rule 45 (expr -> ID [ expr ] .)
    *               reduce using rule 45 (expr -> ID [ expr ] .)
    -               reduce using rule 45 (expr -> ID [ expr ] .)
    +               reduce using rule 45 (expr -> ID [ expr ] .)
    )               reduce using rule 45 (expr -> ID [ expr ] .)
    ;               reduce using rule 45 (expr -> ID [ expr ] .)
    END             reduce using rule 45 (expr -> ID [ expr ] .)
    ELSE            reduce using rule 45 (expr -> ID [ expr ] .)
    DF              reduce using rule 45 (expr -> ID [ expr ] .)
    ET              reduce using rule 45 (expr -> ID [ expr ] .)
    GE              reduce using rule 45 (expr -> ID [ expr ] .)
    GT              reduce using rule 45 (expr -> ID [ expr ] .)
    LE              reduce using rule 45 (expr -> ID [ expr ] .)
    LT              reduce using rule 45 (expr -> ID [ expr ] .)
    ,               reduce using rule 45 (expr -> ID [ expr ] .)
    THEN            reduce using rule 45 (expr -> ID [ expr ] .)
    OR              reduce using rule 45 (expr -> ID [ expr ] .)
    AND             reduce using rule 45 (expr -> ID [ expr ] .)
    DO              reduce using rule 45 (expr -> ID [ expr ] .)


state 121

    (22) stmt -> ID ( exprlist ) .
    ;               reduce using rule 22 (stmt -> ID ( exprlist ) .)
    END             reduce using rule 22 (stmt -> ID ( exprlist ) .)
    ELSE            reduce using rule 22 (stmt -> ID ( exprlist ) .)


state 122

    (38) location -> ID [ expr ] .
    ASSIGNOP        reduce using rule 38 (location -> ID [ expr ] .)
    )               reduce using rule 38 (location -> ID [ expr ] .)


state 123

    (27) stmt -> IF relation THEN stmt . _3_ELSE_stmt_optional
    (28) _3_ELSE_stmt_optional -> . ELSE stmt
    (29) _3_ELSE_stmt_optional -> .
  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 139
    ;               reduce using rule 29 (_3_ELSE_stmt_optional -> .)
    END             reduce using rule 29 (_3_ELSE_stmt_optional -> .)

    _3_ELSE_stmt_optional          shift and go to state 138

state 124

    (58) relation -> relation OR relation .
    (58) relation -> relation . OR relation
    (59) relation -> relation . AND relation
    THEN            reduce using rule 58 (relation -> relation OR relation .)
    OR              reduce using rule 58 (relation -> relation OR relation .)
    DO              reduce using rule 58 (relation -> relation OR relation .)
    )               reduce using rule 58 (relation -> relation OR relation .)
    AND             shift and go to state 98


state 125

    (59) relation -> relation AND relation .
    (58) relation -> relation . OR relation
    (59) relation -> relation . AND relation
    THEN            reduce using rule 59 (relation -> relation AND relation .)
    OR              reduce using rule 59 (relation -> relation AND relation .)
    AND             reduce using rule 59 (relation -> relation AND relation .)
    DO              reduce using rule 59 (relation -> relation AND relation .)
    )               reduce using rule 59 (relation -> relation AND relation .)


state 126

    (56) relation -> ( relation ) .
    THEN            reduce using rule 56 (relation -> ( relation ) .)
    OR              reduce using rule 56 (relation -> ( relation ) .)
    AND             reduce using rule 56 (relation -> ( relation ) .)
    DO              reduce using rule 56 (relation -> ( relation ) .)
    )               reduce using rule 56 (relation -> ( relation ) .)


state 127

    (60) relation -> expr DF expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    THEN            reduce using rule 60 (relation -> expr DF expr .)
    OR              reduce using rule 60 (relation -> expr DF expr .)
    AND             reduce using rule 60 (relation -> expr DF expr .)
    DO              reduce using rule 60 (relation -> expr DF expr .)
    )               reduce using rule 60 (relation -> expr DF expr .)
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 128

    (61) relation -> expr ET expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    THEN            reduce using rule 61 (relation -> expr ET expr .)
    OR              reduce using rule 61 (relation -> expr ET expr .)
    AND             reduce using rule 61 (relation -> expr ET expr .)
    DO              reduce using rule 61 (relation -> expr ET expr .)
    )               reduce using rule 61 (relation -> expr ET expr .)
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 129

    (62) relation -> expr GE expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    THEN            reduce using rule 62 (relation -> expr GE expr .)
    OR              reduce using rule 62 (relation -> expr GE expr .)
    AND             reduce using rule 62 (relation -> expr GE expr .)
    DO              reduce using rule 62 (relation -> expr GE expr .)
    )               reduce using rule 62 (relation -> expr GE expr .)
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 130

    (63) relation -> expr GT expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    THEN            reduce using rule 63 (relation -> expr GT expr .)
    OR              reduce using rule 63 (relation -> expr GT expr .)
    AND             reduce using rule 63 (relation -> expr GT expr .)
    DO              reduce using rule 63 (relation -> expr GT expr .)
    )               reduce using rule 63 (relation -> expr GT expr .)
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 131

    (64) relation -> expr LE expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    THEN            reduce using rule 64 (relation -> expr LE expr .)
    OR              reduce using rule 64 (relation -> expr LE expr .)
    AND             reduce using rule 64 (relation -> expr LE expr .)
    DO              reduce using rule 64 (relation -> expr LE expr .)
    )               reduce using rule 64 (relation -> expr LE expr .)
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 132

    (65) relation -> expr LT expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    THEN            reduce using rule 65 (relation -> expr LT expr .)
    OR              reduce using rule 65 (relation -> expr LT expr .)
    AND             reduce using rule 65 (relation -> expr LT expr .)
    DO              reduce using rule 65 (relation -> expr LT expr .)
    )               reduce using rule 65 (relation -> expr LT expr .)
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 133

    (31) stmt -> WHILE relation DO stmt .
    ;               reduce using rule 31 (stmt -> WHILE relation DO stmt .)
    END             reduce using rule 31 (stmt -> WHILE relation DO stmt .)
    ELSE            reduce using rule 31 (stmt -> WHILE relation DO stmt .)


state 134

    (32) stmt -> READ ( location ) .
    ;               reduce using rule 32 (stmt -> READ ( location ) .)
    END             reduce using rule 32 (stmt -> READ ( location ) .)
    ELSE            reduce using rule 32 (stmt -> READ ( location ) .)


state 135

    (33) stmt -> WRITE ( expr ) .
    ;               reduce using rule 33 (stmt -> WRITE ( expr ) .)
    END             reduce using rule 33 (stmt -> WRITE ( expr ) .)
    ELSE            reduce using rule 33 (stmt -> WRITE ( expr ) .)


state 136

    (34) stmt -> PRINT ( literal ) .
    ;               reduce using rule 34 (stmt -> PRINT ( literal ) .)
    END             reduce using rule 34 (stmt -> PRINT ( literal ) .)
    ELSE            reduce using rule 34 (stmt -> PRINT ( literal ) .)


state 137

    (67) exprlist -> exprlist , expr .
    (52) expr -> expr . / expr
    (53) expr -> expr . * expr
    (54) expr -> expr . - expr
    (55) expr -> expr . + expr
    ,               reduce using rule 67 (exprlist -> exprlist , expr .)
    )               reduce using rule 67 (exprlist -> exprlist , expr .)
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 138

    (27) stmt -> IF relation THEN stmt _3_ELSE_stmt_optional .
    ;               reduce using rule 27 (stmt -> IF relation THEN stmt _3_ELSE_stmt_optional .)
    END             reduce using rule 27 (stmt -> IF relation THEN stmt _3_ELSE_stmt_optional .)
    ELSE            reduce using rule 27 (stmt -> IF relation THEN stmt _3_ELSE_stmt_optional .)


state 139

    (28) _3_ELSE_stmt_optional -> ELSE . stmt
    (22) stmt -> . ID ( exprlist )
    (23) stmt -> . SKIP
    (24) stmt -> . RETURN expr
    (25) stmt -> . location ASSIGNOP expr
    (26) stmt -> . BEGIN stmtlist END
    (27) stmt -> . IF relation THEN stmt _3_ELSE_stmt_optional
    (30) stmt -> . BREAK
    (31) stmt -> . WHILE relation DO stmt
    (32) stmt -> . READ ( location )
    (33) stmt -> . WRITE ( expr )
    (34) stmt -> . PRINT ( literal )
    (38) location -> . ID [ expr ]
    (39) location -> . ID
    ID              shift and go to state 38
    SKIP            shift and go to state 42
    RETURN          shift and go to state 43
    BEGIN           shift and go to state 39
    IF              shift and go to state 45
    BREAK           shift and go to state 46
    WHILE           shift and go to state 47
    READ            shift and go to state 48
    WRITE           shift and go to state 49
    PRINT           shift and go to state 50

    stmt                           shift and go to state 140
    location                       shift and go to state 44

state 140

    (28) _3_ELSE_stmt_optional -> ELSE stmt .
    ELSE            reduce using rule 28 (_3_ELSE_stmt_optional -> ELSE stmt .)
    ;               reduce using rule 28 (_3_ELSE_stmt_optional -> ELSE stmt .)
    END             reduce using rule 28 (_3_ELSE_stmt_optional -> ELSE stmt .)


Conflicts:

shift/reduce conflict for ELSE in state 123 resolved as shift