Grammar:

Rule 0     S' -> program
Rule 1     program -> funclist
Rule 2     funclist -> func
Rule 3     funclist -> funclist func
Rule 4     func -> FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END
Rule 5     _1_parmlist_optional -> parmlist
Rule 6     _1_parmlist_optional -> <empty>
Rule 7     _2_locallist_optional -> locallist
Rule 8     _2_locallist_optional -> <empty>
Rule 9     parmlist -> parm
Rule 10    parmlist -> parmlist , parm
Rule 11    parm -> ID : datatype
Rule 12    datatype -> FLOAT
Rule 13    datatype -> INT
Rule 14    datatype -> FLOAT [ expr ]
Rule 15    datatype -> INT [ expr ]
Rule 16    locallist -> local ; locallist
Rule 17    locallist -> local ;
Rule 18    local -> func
Rule 19    local -> vardecl
Rule 20    vardecl -> ID : datatype
Rule 21    stmtlist -> stmt ; stmtlist
Rule 22    stmtlist -> stmt
Rule 23    stmt -> ID ( exprlist )
Rule 24    stmt -> location ASSIGNOP expr
Rule 25    stmt -> RETURN expr
Rule 26    stmt -> SKIP
Rule 27    stmt -> BEGIN stmtlist END
Rule 28    stmt -> IF relation THEN stmt
Rule 29    stmt -> BREAK
Rule 30    stmt -> WHILE relation DO stmt
Rule 31    stmt -> READ ( location )
Rule 32    stmt -> WRITE ( expr )
Rule 33    stmt -> PRINT ( literal )
Rule 34    literal -> STRING
Rule 35    location -> ID [ expr ]
Rule 36    location -> ID
Rule 37    expr -> FLOAT ( expr )
Rule 38    expr -> INT ( expr )
Rule 39    expr -> ID ( _3_exprlist_optional )
Rule 40    _3_exprlist_optional -> exprlist
Rule 41    _3_exprlist_optional -> <empty>
Rule 42    expr -> ID [ expr ]
Rule 43    expr -> ID
Rule 44    expr -> FCONST
Rule 45    expr -> ICONST
Rule 46    expr -> ( expr )
Rule 47    expr -> + expr  [precedence=right, level=7]
Rule 48    expr -> - expr  [precedence=right, level=7]
Rule 49    expr -> expr / expr  [precedence=left, level=6]
Rule 50    expr -> expr * expr  [precedence=left, level=6]
Rule 51    expr -> expr - expr  [precedence=left, level=5]
Rule 52    expr -> expr + expr  [precedence=left, level=5]
Rule 53    relation -> ( relation )
Rule 54    relation -> NOT relation  [precedence=right, level=7]
Rule 55    relation -> relation OR relation  [precedence=left, level=1]
Rule 56    relation -> relation AND relation  [precedence=left, level=2]
Rule 57    relation -> expr DF expr  [precedence=left, level=3]
Rule 58    relation -> expr ET expr  [precedence=left, level=3]
Rule 59    relation -> expr GE expr  [precedence=left, level=4]
Rule 60    relation -> expr GT expr  [precedence=left, level=4]
Rule 61    relation -> expr LE expr  [precedence=left, level=4]
Rule 62    relation -> expr LT expr  [precedence=left, level=4]
Rule 63    exprlist -> expr
Rule 64    exprlist -> exprlist , expr

Unused terminals:

    ELSE

Terminals, with rules where they appear:

(                    : 4 23 31 32 33 37 38 39 46 53
)                    : 4 23 31 32 33 37 38 39 46 53
*                    : 50
+                    : 47 52
,                    : 10 64
-                    : 48 51
/                    : 49
:                    : 11 20
;                    : 16 17 21
AND                  : 56
ASSIGNOP             : 24
BEGIN                : 4 27
BREAK                : 29
DF                   : 57
DO                   : 30
ELSE                 : 
END                  : 4 27
ET                   : 58
FCONST               : 44
FLOAT                : 12 14 37
FUN                  : 4
GE                   : 59
GT                   : 60
ICONST               : 45
ID                   : 4 11 20 23 35 36 39 42 43
IF                   : 28
INT                  : 13 15 38
LE                   : 61
LT                   : 62
NOT                  : 54
OR                   : 55
PRINT                : 33
READ                 : 31
RETURN               : 25
SKIP                 : 26
STRING               : 34
THEN                 : 28
WHILE                : 30
WRITE                : 32
[                    : 14 15 35 42
]                    : 14 15 35 42
error                : 

Nonterminals, with rules where they appear:

_1_parmlist_optional : 4
_2_locallist_optional : 4
_3_exprlist_optional : 39
datatype             : 11 20
expr                 : 14 15 24 25 32 35 37 38 42 46 47 48 49 49 50 50 51 51 52 52 57 57 58 58 59 59 60 60 61 61 62 62 63 64
exprlist             : 23 40 64
func                 : 2 3 18
funclist             : 1 3
literal              : 33
local                : 16 17
locallist            : 7 16
location             : 24 31
parm                 : 9 10
parmlist             : 5 10
program              : 0
relation             : 28 30 53 54 55 55 56 56
stmt                 : 21 22 28 30
stmtlist             : 4 21 27
vardecl              : 19


state 0

    (0) S' -> . program
    (1) program -> . funclist
    (2) funclist -> . func
    (3) funclist -> . funclist func
    (4) func -> . FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END
    FUN             shift and go to state 4

    program                        shift and go to state 1
    funclist                       shift and go to state 2
    func                           shift and go to state 3

state 1

    (0) S' -> program .


state 2

    (1) program -> funclist .
    (3) funclist -> funclist . func
    (4) func -> . FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END
    $end            reduce using rule 1 (program -> funclist .)
    FUN             shift and go to state 4

    func                           shift and go to state 5

state 3

    (2) funclist -> func .
    FUN             reduce using rule 2 (funclist -> func .)
    $end            reduce using rule 2 (funclist -> func .)


state 4

    (4) func -> FUN . ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END
    ID              shift and go to state 6


state 5

    (3) funclist -> funclist func .
    FUN             reduce using rule 3 (funclist -> funclist func .)
    $end            reduce using rule 3 (funclist -> funclist func .)


state 6

    (4) func -> FUN ID . ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END
    (               shift and go to state 7


state 7

    (4) func -> FUN ID ( . _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END
    (5) _1_parmlist_optional -> . parmlist
    (6) _1_parmlist_optional -> .
    (9) parmlist -> . parm
    (10) parmlist -> . parmlist , parm
    (11) parm -> . ID : datatype
    )               reduce using rule 6 (_1_parmlist_optional -> .)
    ID              shift and go to state 8

    _1_parmlist_optional           shift and go to state 9
    parmlist                       shift and go to state 10
    parm                           shift and go to state 11

state 8

    (11) parm -> ID . : datatype
    :               shift and go to state 12


state 9

    (4) func -> FUN ID ( _1_parmlist_optional . ) _2_locallist_optional BEGIN stmtlist END
    )               shift and go to state 13


state 10

    (5) _1_parmlist_optional -> parmlist .
    (10) parmlist -> parmlist . , parm
    )               reduce using rule 5 (_1_parmlist_optional -> parmlist .)
    ,               shift and go to state 14


state 11

    (9) parmlist -> parm .
    ,               reduce using rule 9 (parmlist -> parm .)
    )               reduce using rule 9 (parmlist -> parm .)


state 12

    (11) parm -> ID : . datatype
    (12) datatype -> . FLOAT
    (13) datatype -> . INT
    (14) datatype -> . FLOAT [ expr ]
    (15) datatype -> . INT [ expr ]
    FLOAT           shift and go to state 16
    INT             shift and go to state 17

    datatype                       shift and go to state 15

state 13

    (4) func -> FUN ID ( _1_parmlist_optional ) . _2_locallist_optional BEGIN stmtlist END
    (7) _2_locallist_optional -> . locallist
    (8) _2_locallist_optional -> .
    (16) locallist -> . local ; locallist
    (17) locallist -> . local ;
    (18) local -> . func
    (19) local -> . vardecl
    (4) func -> . FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END
    (20) vardecl -> . ID : datatype
    BEGIN           reduce using rule 8 (_2_locallist_optional -> .)
    FUN             shift and go to state 4
    ID              shift and go to state 18

    _2_locallist_optional          shift and go to state 19
    locallist                      shift and go to state 20
    local                          shift and go to state 21
    func                           shift and go to state 22
    vardecl                        shift and go to state 23

state 14

    (10) parmlist -> parmlist , . parm
    (11) parm -> . ID : datatype
    ID              shift and go to state 8

    parm                           shift and go to state 24

state 15

    (11) parm -> ID : datatype .
    ,               reduce using rule 11 (parm -> ID : datatype .)
    )               reduce using rule 11 (parm -> ID : datatype .)


state 16

    (12) datatype -> FLOAT .
    (14) datatype -> FLOAT . [ expr ]
    ,               reduce using rule 12 (datatype -> FLOAT .)
    )               reduce using rule 12 (datatype -> FLOAT .)
    ;               reduce using rule 12 (datatype -> FLOAT .)
    [               shift and go to state 25


state 17

    (13) datatype -> INT .
    (15) datatype -> INT . [ expr ]
    ,               reduce using rule 13 (datatype -> INT .)
    )               reduce using rule 13 (datatype -> INT .)
    ;               reduce using rule 13 (datatype -> INT .)
    [               shift and go to state 26


state 18

    (20) vardecl -> ID . : datatype
    :               shift and go to state 27


state 19

    (4) func -> FUN ID ( _1_parmlist_optional ) _2_locallist_optional . BEGIN stmtlist END
    BEGIN           shift and go to state 28


state 20

    (7) _2_locallist_optional -> locallist .
    BEGIN           reduce using rule 7 (_2_locallist_optional -> locallist .)


state 21

    (16) locallist -> local . ; locallist
    (17) locallist -> local . ;
    ;               shift and go to state 29


state 22

    (18) local -> func .
    ;               reduce using rule 18 (local -> func .)


state 23

    (19) local -> vardecl .
    ;               reduce using rule 19 (local -> vardecl .)


state 24

    (10) parmlist -> parmlist , parm .
    ,               reduce using rule 10 (parmlist -> parmlist , parm .)
    )               reduce using rule 10 (parmlist -> parmlist , parm .)


state 25

    (14) datatype -> FLOAT [ . expr ]
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 31

state 26

    (15) datatype -> INT [ . expr ]
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 39

state 27

    (20) vardecl -> ID : . datatype
    (12) datatype -> . FLOAT
    (13) datatype -> . INT
    (14) datatype -> . FLOAT [ expr ]
    (15) datatype -> . INT [ expr ]
    FLOAT           shift and go to state 16
    INT             shift and go to state 17

    datatype                       shift and go to state 40

state 28

    (4) func -> FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN . stmtlist END
    (21) stmtlist -> . stmt ; stmtlist
    (22) stmtlist -> . stmt
    (23) stmt -> . ID ( exprlist )
    (24) stmt -> . location ASSIGNOP expr
    (25) stmt -> . RETURN expr
    (26) stmt -> . SKIP
    (27) stmt -> . BEGIN stmtlist END
    (28) stmt -> . IF relation THEN stmt
    (29) stmt -> . BREAK
    (30) stmt -> . WHILE relation DO stmt
    (31) stmt -> . READ ( location )
    (32) stmt -> . WRITE ( expr )
    (33) stmt -> . PRINT ( literal )
    (35) location -> . ID [ expr ]
    (36) location -> . ID
    ID              shift and go to state 41
    RETURN          shift and go to state 46
    SKIP            shift and go to state 47
    BEGIN           shift and go to state 42
    IF              shift and go to state 48
    BREAK           shift and go to state 49
    WHILE           shift and go to state 50
    READ            shift and go to state 51
    WRITE           shift and go to state 52
    PRINT           shift and go to state 53

    stmtlist                       shift and go to state 43
    stmt                           shift and go to state 44
    location                       shift and go to state 45

state 29

    (16) locallist -> local ; . locallist
    (17) locallist -> local ; .
    (16) locallist -> . local ; locallist
    (17) locallist -> . local ;
    (18) local -> . func
    (19) local -> . vardecl
    (4) func -> . FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END
    (20) vardecl -> . ID : datatype
    BEGIN           reduce using rule 17 (locallist -> local ; .)
    FUN             shift and go to state 4
    ID              shift and go to state 18

    local                          shift and go to state 21
    locallist                      shift and go to state 54
    func                           shift and go to state 22
    vardecl                        shift and go to state 23

state 30

    (37) expr -> FLOAT . ( expr )
    (               shift and go to state 55


state 31

    (14) datatype -> FLOAT [ expr . ]
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    ]               shift and go to state 56
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60


state 32

    (46) expr -> ( . expr )
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 61

state 33

    (38) expr -> INT . ( expr )
    (               shift and go to state 62


state 34

    (39) expr -> ID . ( _3_exprlist_optional )
    (42) expr -> ID . [ expr ]
    (43) expr -> ID .
    (               shift and go to state 63
    [               shift and go to state 64
    ]               reduce using rule 43 (expr -> ID .)
    /               reduce using rule 43 (expr -> ID .)
    *               reduce using rule 43 (expr -> ID .)
    -               reduce using rule 43 (expr -> ID .)
    +               reduce using rule 43 (expr -> ID .)
    )               reduce using rule 43 (expr -> ID .)
    ;               reduce using rule 43 (expr -> ID .)
    END             reduce using rule 43 (expr -> ID .)
    DF              reduce using rule 43 (expr -> ID .)
    ET              reduce using rule 43 (expr -> ID .)
    GE              reduce using rule 43 (expr -> ID .)
    GT              reduce using rule 43 (expr -> ID .)
    LE              reduce using rule 43 (expr -> ID .)
    LT              reduce using rule 43 (expr -> ID .)
    ,               reduce using rule 43 (expr -> ID .)
    THEN            reduce using rule 43 (expr -> ID .)
    OR              reduce using rule 43 (expr -> ID .)
    AND             reduce using rule 43 (expr -> ID .)
    DO              reduce using rule 43 (expr -> ID .)


state 35

    (44) expr -> FCONST .
    ]               reduce using rule 44 (expr -> FCONST .)
    /               reduce using rule 44 (expr -> FCONST .)
    *               reduce using rule 44 (expr -> FCONST .)
    -               reduce using rule 44 (expr -> FCONST .)
    +               reduce using rule 44 (expr -> FCONST .)
    )               reduce using rule 44 (expr -> FCONST .)
    ;               reduce using rule 44 (expr -> FCONST .)
    END             reduce using rule 44 (expr -> FCONST .)
    DF              reduce using rule 44 (expr -> FCONST .)
    ET              reduce using rule 44 (expr -> FCONST .)
    GE              reduce using rule 44 (expr -> FCONST .)
    GT              reduce using rule 44 (expr -> FCONST .)
    LE              reduce using rule 44 (expr -> FCONST .)
    LT              reduce using rule 44 (expr -> FCONST .)
    ,               reduce using rule 44 (expr -> FCONST .)
    THEN            reduce using rule 44 (expr -> FCONST .)
    OR              reduce using rule 44 (expr -> FCONST .)
    AND             reduce using rule 44 (expr -> FCONST .)
    DO              reduce using rule 44 (expr -> FCONST .)


state 36

    (45) expr -> ICONST .
    ]               reduce using rule 45 (expr -> ICONST .)
    /               reduce using rule 45 (expr -> ICONST .)
    *               reduce using rule 45 (expr -> ICONST .)
    -               reduce using rule 45 (expr -> ICONST .)
    +               reduce using rule 45 (expr -> ICONST .)
    )               reduce using rule 45 (expr -> ICONST .)
    ;               reduce using rule 45 (expr -> ICONST .)
    END             reduce using rule 45 (expr -> ICONST .)
    DF              reduce using rule 45 (expr -> ICONST .)
    ET              reduce using rule 45 (expr -> ICONST .)
    GE              reduce using rule 45 (expr -> ICONST .)
    GT              reduce using rule 45 (expr -> ICONST .)
    LE              reduce using rule 45 (expr -> ICONST .)
    LT              reduce using rule 45 (expr -> ICONST .)
    ,               reduce using rule 45 (expr -> ICONST .)
    THEN            reduce using rule 45 (expr -> ICONST .)
    OR              reduce using rule 45 (expr -> ICONST .)
    AND             reduce using rule 45 (expr -> ICONST .)
    DO              reduce using rule 45 (expr -> ICONST .)


state 37

    (47) expr -> + . expr
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 65

state 38

    (48) expr -> - . expr
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 66

state 39

    (15) datatype -> INT [ expr . ]
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    ]               shift and go to state 67
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60


state 40

    (20) vardecl -> ID : datatype .
    ;               reduce using rule 20 (vardecl -> ID : datatype .)


state 41

    (23) stmt -> ID . ( exprlist )
    (35) location -> ID . [ expr ]
    (36) location -> ID .
    (               shift and go to state 68
    [               shift and go to state 69
    ASSIGNOP        reduce using rule 36 (location -> ID .)


state 42

    (27) stmt -> BEGIN . stmtlist END
    (21) stmtlist -> . stmt ; stmtlist
    (22) stmtlist -> . stmt
    (23) stmt -> . ID ( exprlist )
    (24) stmt -> . location ASSIGNOP expr
    (25) stmt -> . RETURN expr
    (26) stmt -> . SKIP
    (27) stmt -> . BEGIN stmtlist END
    (28) stmt -> . IF relation THEN stmt
    (29) stmt -> . BREAK
    (30) stmt -> . WHILE relation DO stmt
    (31) stmt -> . READ ( location )
    (32) stmt -> . WRITE ( expr )
    (33) stmt -> . PRINT ( literal )
    (35) location -> . ID [ expr ]
    (36) location -> . ID
    ID              shift and go to state 41
    RETURN          shift and go to state 46
    SKIP            shift and go to state 47
    BEGIN           shift and go to state 42
    IF              shift and go to state 48
    BREAK           shift and go to state 49
    WHILE           shift and go to state 50
    READ            shift and go to state 51
    WRITE           shift and go to state 52
    PRINT           shift and go to state 53

    stmtlist                       shift and go to state 70
    stmt                           shift and go to state 44
    location                       shift and go to state 45

state 43

    (4) func -> FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist . END
    END             shift and go to state 71


state 44

    (21) stmtlist -> stmt . ; stmtlist
    (22) stmtlist -> stmt .
    ;               shift and go to state 72
    END             reduce using rule 22 (stmtlist -> stmt .)


state 45

    (24) stmt -> location . ASSIGNOP expr
    ASSIGNOP        shift and go to state 73


state 46

    (25) stmt -> RETURN . expr
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 74

state 47

    (26) stmt -> SKIP .
    ;               reduce using rule 26 (stmt -> SKIP .)
    END             reduce using rule 26 (stmt -> SKIP .)


state 48

    (28) stmt -> IF . relation THEN stmt
    (53) relation -> . ( relation )
    (54) relation -> . NOT relation
    (55) relation -> . relation OR relation
    (56) relation -> . relation AND relation
    (57) relation -> . expr DF expr
    (58) relation -> . expr ET expr
    (59) relation -> . expr GE expr
    (60) relation -> . expr GT expr
    (61) relation -> . expr LE expr
    (62) relation -> . expr LT expr
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (               shift and go to state 76
    NOT             shift and go to state 77
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38

    relation                       shift and go to state 75
    expr                           shift and go to state 78

state 49

    (29) stmt -> BREAK .
    ;               reduce using rule 29 (stmt -> BREAK .)
    END             reduce using rule 29 (stmt -> BREAK .)


state 50

    (30) stmt -> WHILE . relation DO stmt
    (53) relation -> . ( relation )
    (54) relation -> . NOT relation
    (55) relation -> . relation OR relation
    (56) relation -> . relation AND relation
    (57) relation -> . expr DF expr
    (58) relation -> . expr ET expr
    (59) relation -> . expr GE expr
    (60) relation -> . expr GT expr
    (61) relation -> . expr LE expr
    (62) relation -> . expr LT expr
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (               shift and go to state 76
    NOT             shift and go to state 77
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38

    relation                       shift and go to state 79
    expr                           shift and go to state 78

state 51

    (31) stmt -> READ . ( location )
    (               shift and go to state 80


state 52

    (32) stmt -> WRITE . ( expr )
    (               shift and go to state 81


state 53

    (33) stmt -> PRINT . ( literal )
    (               shift and go to state 82


state 54

    (16) locallist -> local ; locallist .
    BEGIN           reduce using rule 16 (locallist -> local ; locallist .)


state 55

    (37) expr -> FLOAT ( . expr )
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 83

state 56

    (14) datatype -> FLOAT [ expr ] .
    ,               reduce using rule 14 (datatype -> FLOAT [ expr ] .)
    )               reduce using rule 14 (datatype -> FLOAT [ expr ] .)
    ;               reduce using rule 14 (datatype -> FLOAT [ expr ] .)


state 57

    (49) expr -> expr / . expr
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 84

state 58

    (50) expr -> expr * . expr
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 85

state 59

    (51) expr -> expr - . expr
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 86

state 60

    (52) expr -> expr + . expr
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 87

state 61

    (46) expr -> ( expr . )
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    )               shift and go to state 88
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60


state 62

    (38) expr -> INT ( . expr )
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 89

state 63

    (39) expr -> ID ( . _3_exprlist_optional )
    (40) _3_exprlist_optional -> . exprlist
    (41) _3_exprlist_optional -> .
    (63) exprlist -> . expr
    (64) exprlist -> . exprlist , expr
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    )               reduce using rule 41 (_3_exprlist_optional -> .)
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    _3_exprlist_optional           shift and go to state 90
    exprlist                       shift and go to state 91
    expr                           shift and go to state 92

state 64

    (42) expr -> ID [ . expr ]
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 93

state 65

    (47) expr -> + expr .
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    ]               reduce using rule 47 (expr -> + expr .)
    /               reduce using rule 47 (expr -> + expr .)
    *               reduce using rule 47 (expr -> + expr .)
    -               reduce using rule 47 (expr -> + expr .)
    +               reduce using rule 47 (expr -> + expr .)
    )               reduce using rule 47 (expr -> + expr .)
    ;               reduce using rule 47 (expr -> + expr .)
    END             reduce using rule 47 (expr -> + expr .)
    DF              reduce using rule 47 (expr -> + expr .)
    ET              reduce using rule 47 (expr -> + expr .)
    GE              reduce using rule 47 (expr -> + expr .)
    GT              reduce using rule 47 (expr -> + expr .)
    LE              reduce using rule 47 (expr -> + expr .)
    LT              reduce using rule 47 (expr -> + expr .)
    ,               reduce using rule 47 (expr -> + expr .)
    THEN            reduce using rule 47 (expr -> + expr .)
    OR              reduce using rule 47 (expr -> + expr .)
    AND             reduce using rule 47 (expr -> + expr .)
    DO              reduce using rule 47 (expr -> + expr .)


state 66

    (48) expr -> - expr .
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    ]               reduce using rule 48 (expr -> - expr .)
    /               reduce using rule 48 (expr -> - expr .)
    *               reduce using rule 48 (expr -> - expr .)
    -               reduce using rule 48 (expr -> - expr .)
    +               reduce using rule 48 (expr -> - expr .)
    )               reduce using rule 48 (expr -> - expr .)
    ;               reduce using rule 48 (expr -> - expr .)
    END             reduce using rule 48 (expr -> - expr .)
    DF              reduce using rule 48 (expr -> - expr .)
    ET              reduce using rule 48 (expr -> - expr .)
    GE              reduce using rule 48 (expr -> - expr .)
    GT              reduce using rule 48 (expr -> - expr .)
    LE              reduce using rule 48 (expr -> - expr .)
    LT              reduce using rule 48 (expr -> - expr .)
    ,               reduce using rule 48 (expr -> - expr .)
    THEN            reduce using rule 48 (expr -> - expr .)
    OR              reduce using rule 48 (expr -> - expr .)
    AND             reduce using rule 48 (expr -> - expr .)
    DO              reduce using rule 48 (expr -> - expr .)


state 67

    (15) datatype -> INT [ expr ] .
    ,               reduce using rule 15 (datatype -> INT [ expr ] .)
    )               reduce using rule 15 (datatype -> INT [ expr ] .)
    ;               reduce using rule 15 (datatype -> INT [ expr ] .)


state 68

    (23) stmt -> ID ( . exprlist )
    (63) exprlist -> . expr
    (64) exprlist -> . exprlist , expr
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    exprlist                       shift and go to state 94
    expr                           shift and go to state 92

state 69

    (35) location -> ID [ . expr ]
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 95

state 70

    (27) stmt -> BEGIN stmtlist . END
    END             shift and go to state 96


state 71

    (4) func -> FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END .
    FUN             reduce using rule 4 (func -> FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END .)
    $end            reduce using rule 4 (func -> FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END .)
    ;               reduce using rule 4 (func -> FUN ID ( _1_parmlist_optional ) _2_locallist_optional BEGIN stmtlist END .)


state 72

    (21) stmtlist -> stmt ; . stmtlist
    (21) stmtlist -> . stmt ; stmtlist
    (22) stmtlist -> . stmt
    (23) stmt -> . ID ( exprlist )
    (24) stmt -> . location ASSIGNOP expr
    (25) stmt -> . RETURN expr
    (26) stmt -> . SKIP
    (27) stmt -> . BEGIN stmtlist END
    (28) stmt -> . IF relation THEN stmt
    (29) stmt -> . BREAK
    (30) stmt -> . WHILE relation DO stmt
    (31) stmt -> . READ ( location )
    (32) stmt -> . WRITE ( expr )
    (33) stmt -> . PRINT ( literal )
    (35) location -> . ID [ expr ]
    (36) location -> . ID
    ID              shift and go to state 41
    RETURN          shift and go to state 46
    SKIP            shift and go to state 47
    BEGIN           shift and go to state 42
    IF              shift and go to state 48
    BREAK           shift and go to state 49
    WHILE           shift and go to state 50
    READ            shift and go to state 51
    WRITE           shift and go to state 52
    PRINT           shift and go to state 53

    stmt                           shift and go to state 44
    stmtlist                       shift and go to state 97
    location                       shift and go to state 45

state 73

    (24) stmt -> location ASSIGNOP . expr
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 98

state 74

    (25) stmt -> RETURN expr .
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    ;               reduce using rule 25 (stmt -> RETURN expr .)
    END             reduce using rule 25 (stmt -> RETURN expr .)
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60


state 75

    (28) stmt -> IF relation . THEN stmt
    (55) relation -> relation . OR relation
    (56) relation -> relation . AND relation
    THEN            shift and go to state 99
    OR              shift and go to state 100
    AND             shift and go to state 101


state 76

    (53) relation -> ( . relation )
    (46) expr -> ( . expr )
    (53) relation -> . ( relation )
    (54) relation -> . NOT relation
    (55) relation -> . relation OR relation
    (56) relation -> . relation AND relation
    (57) relation -> . expr DF expr
    (58) relation -> . expr ET expr
    (59) relation -> . expr GE expr
    (60) relation -> . expr GT expr
    (61) relation -> . expr LE expr
    (62) relation -> . expr LT expr
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (               shift and go to state 76
    NOT             shift and go to state 77
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38

    relation                       shift and go to state 102
    expr                           shift and go to state 103

state 77

    (54) relation -> NOT . relation
    (53) relation -> . ( relation )
    (54) relation -> . NOT relation
    (55) relation -> . relation OR relation
    (56) relation -> . relation AND relation
    (57) relation -> . expr DF expr
    (58) relation -> . expr ET expr
    (59) relation -> . expr GE expr
    (60) relation -> . expr GT expr
    (61) relation -> . expr LE expr
    (62) relation -> . expr LT expr
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (               shift and go to state 76
    NOT             shift and go to state 77
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38

    relation                       shift and go to state 104
    expr                           shift and go to state 78

state 78

    (57) relation -> expr . DF expr
    (58) relation -> expr . ET expr
    (59) relation -> expr . GE expr
    (60) relation -> expr . GT expr
    (61) relation -> expr . LE expr
    (62) relation -> expr . LT expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    DF              shift and go to state 105
    ET              shift and go to state 106
    GE              shift and go to state 107
    GT              shift and go to state 108
    LE              shift and go to state 109
    LT              shift and go to state 110
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60


state 79

    (30) stmt -> WHILE relation . DO stmt
    (55) relation -> relation . OR relation
    (56) relation -> relation . AND relation
    DO              shift and go to state 111
    OR              shift and go to state 100
    AND             shift and go to state 101


state 80

    (31) stmt -> READ ( . location )
    (35) location -> . ID [ expr ]
    (36) location -> . ID
    ID              shift and go to state 113

    location                       shift and go to state 112

state 81

    (32) stmt -> WRITE ( . expr )
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 114

state 82

    (33) stmt -> PRINT ( . literal )
    (34) literal -> . STRING
    STRING          shift and go to state 116

    literal                        shift and go to state 115

state 83

    (37) expr -> FLOAT ( expr . )
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    )               shift and go to state 117
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60


state 84

    (49) expr -> expr / expr .
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    ]               reduce using rule 49 (expr -> expr / expr .)
    /               reduce using rule 49 (expr -> expr / expr .)
    *               reduce using rule 49 (expr -> expr / expr .)
    -               reduce using rule 49 (expr -> expr / expr .)
    +               reduce using rule 49 (expr -> expr / expr .)
    )               reduce using rule 49 (expr -> expr / expr .)
    ;               reduce using rule 49 (expr -> expr / expr .)
    END             reduce using rule 49 (expr -> expr / expr .)
    DF              reduce using rule 49 (expr -> expr / expr .)
    ET              reduce using rule 49 (expr -> expr / expr .)
    GE              reduce using rule 49 (expr -> expr / expr .)
    GT              reduce using rule 49 (expr -> expr / expr .)
    LE              reduce using rule 49 (expr -> expr / expr .)
    LT              reduce using rule 49 (expr -> expr / expr .)
    ,               reduce using rule 49 (expr -> expr / expr .)
    THEN            reduce using rule 49 (expr -> expr / expr .)
    OR              reduce using rule 49 (expr -> expr / expr .)
    AND             reduce using rule 49 (expr -> expr / expr .)
    DO              reduce using rule 49 (expr -> expr / expr .)


state 85

    (50) expr -> expr * expr .
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    ]               reduce using rule 50 (expr -> expr * expr .)
    /               reduce using rule 50 (expr -> expr * expr .)
    *               reduce using rule 50 (expr -> expr * expr .)
    -               reduce using rule 50 (expr -> expr * expr .)
    +               reduce using rule 50 (expr -> expr * expr .)
    )               reduce using rule 50 (expr -> expr * expr .)
    ;               reduce using rule 50 (expr -> expr * expr .)
    END             reduce using rule 50 (expr -> expr * expr .)
    DF              reduce using rule 50 (expr -> expr * expr .)
    ET              reduce using rule 50 (expr -> expr * expr .)
    GE              reduce using rule 50 (expr -> expr * expr .)
    GT              reduce using rule 50 (expr -> expr * expr .)
    LE              reduce using rule 50 (expr -> expr * expr .)
    LT              reduce using rule 50 (expr -> expr * expr .)
    ,               reduce using rule 50 (expr -> expr * expr .)
    THEN            reduce using rule 50 (expr -> expr * expr .)
    OR              reduce using rule 50 (expr -> expr * expr .)
    AND             reduce using rule 50 (expr -> expr * expr .)
    DO              reduce using rule 50 (expr -> expr * expr .)


state 86

    (51) expr -> expr - expr .
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    ]               reduce using rule 51 (expr -> expr - expr .)
    -               reduce using rule 51 (expr -> expr - expr .)
    +               reduce using rule 51 (expr -> expr - expr .)
    )               reduce using rule 51 (expr -> expr - expr .)
    ;               reduce using rule 51 (expr -> expr - expr .)
    END             reduce using rule 51 (expr -> expr - expr .)
    DF              reduce using rule 51 (expr -> expr - expr .)
    ET              reduce using rule 51 (expr -> expr - expr .)
    GE              reduce using rule 51 (expr -> expr - expr .)
    GT              reduce using rule 51 (expr -> expr - expr .)
    LE              reduce using rule 51 (expr -> expr - expr .)
    LT              reduce using rule 51 (expr -> expr - expr .)
    ,               reduce using rule 51 (expr -> expr - expr .)
    THEN            reduce using rule 51 (expr -> expr - expr .)
    OR              reduce using rule 51 (expr -> expr - expr .)
    AND             reduce using rule 51 (expr -> expr - expr .)
    DO              reduce using rule 51 (expr -> expr - expr .)
    /               shift and go to state 57
    *               shift and go to state 58


state 87

    (52) expr -> expr + expr .
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    ]               reduce using rule 52 (expr -> expr + expr .)
    -               reduce using rule 52 (expr -> expr + expr .)
    +               reduce using rule 52 (expr -> expr + expr .)
    )               reduce using rule 52 (expr -> expr + expr .)
    ;               reduce using rule 52 (expr -> expr + expr .)
    END             reduce using rule 52 (expr -> expr + expr .)
    DF              reduce using rule 52 (expr -> expr + expr .)
    ET              reduce using rule 52 (expr -> expr + expr .)
    GE              reduce using rule 52 (expr -> expr + expr .)
    GT              reduce using rule 52 (expr -> expr + expr .)
    LE              reduce using rule 52 (expr -> expr + expr .)
    LT              reduce using rule 52 (expr -> expr + expr .)
    ,               reduce using rule 52 (expr -> expr + expr .)
    THEN            reduce using rule 52 (expr -> expr + expr .)
    OR              reduce using rule 52 (expr -> expr + expr .)
    AND             reduce using rule 52 (expr -> expr + expr .)
    DO              reduce using rule 52 (expr -> expr + expr .)
    /               shift and go to state 57
    *               shift and go to state 58


state 88

    (46) expr -> ( expr ) .
    ]               reduce using rule 46 (expr -> ( expr ) .)
    /               reduce using rule 46 (expr -> ( expr ) .)
    *               reduce using rule 46 (expr -> ( expr ) .)
    -               reduce using rule 46 (expr -> ( expr ) .)
    +               reduce using rule 46 (expr -> ( expr ) .)
    )               reduce using rule 46 (expr -> ( expr ) .)
    ;               reduce using rule 46 (expr -> ( expr ) .)
    END             reduce using rule 46 (expr -> ( expr ) .)
    DF              reduce using rule 46 (expr -> ( expr ) .)
    ET              reduce using rule 46 (expr -> ( expr ) .)
    GE              reduce using rule 46 (expr -> ( expr ) .)
    GT              reduce using rule 46 (expr -> ( expr ) .)
    LE              reduce using rule 46 (expr -> ( expr ) .)
    LT              reduce using rule 46 (expr -> ( expr ) .)
    ,               reduce using rule 46 (expr -> ( expr ) .)
    THEN            reduce using rule 46 (expr -> ( expr ) .)
    OR              reduce using rule 46 (expr -> ( expr ) .)
    AND             reduce using rule 46 (expr -> ( expr ) .)
    DO              reduce using rule 46 (expr -> ( expr ) .)


state 89

    (38) expr -> INT ( expr . )
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    )               shift and go to state 118
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60


state 90

    (39) expr -> ID ( _3_exprlist_optional . )
    )               shift and go to state 119


state 91

    (40) _3_exprlist_optional -> exprlist .
    (64) exprlist -> exprlist . , expr
    )               reduce using rule 40 (_3_exprlist_optional -> exprlist .)
    ,               shift and go to state 120


state 92

    (63) exprlist -> expr .
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    ,               reduce using rule 63 (exprlist -> expr .)
    )               reduce using rule 63 (exprlist -> expr .)
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60


state 93

    (42) expr -> ID [ expr . ]
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    ]               shift and go to state 121
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60


state 94

    (23) stmt -> ID ( exprlist . )
    (64) exprlist -> exprlist . , expr
    )               shift and go to state 122
    ,               shift and go to state 120


state 95

    (35) location -> ID [ expr . ]
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    ]               shift and go to state 123
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60


state 96

    (27) stmt -> BEGIN stmtlist END .
    ;               reduce using rule 27 (stmt -> BEGIN stmtlist END .)
    END             reduce using rule 27 (stmt -> BEGIN stmtlist END .)


state 97

    (21) stmtlist -> stmt ; stmtlist .
    END             reduce using rule 21 (stmtlist -> stmt ; stmtlist .)


state 98

    (24) stmt -> location ASSIGNOP expr .
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    ;               reduce using rule 24 (stmt -> location ASSIGNOP expr .)
    END             reduce using rule 24 (stmt -> location ASSIGNOP expr .)
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60


state 99

    (28) stmt -> IF relation THEN . stmt
    (23) stmt -> . ID ( exprlist )
    (24) stmt -> . location ASSIGNOP expr
    (25) stmt -> . RETURN expr
    (26) stmt -> . SKIP
    (27) stmt -> . BEGIN stmtlist END
    (28) stmt -> . IF relation THEN stmt
    (29) stmt -> . BREAK
    (30) stmt -> . WHILE relation DO stmt
    (31) stmt -> . READ ( location )
    (32) stmt -> . WRITE ( expr )
    (33) stmt -> . PRINT ( literal )
    (35) location -> . ID [ expr ]
    (36) location -> . ID
    ID              shift and go to state 41
    RETURN          shift and go to state 46
    SKIP            shift and go to state 47
    BEGIN           shift and go to state 42
    IF              shift and go to state 48
    BREAK           shift and go to state 49
    WHILE           shift and go to state 50
    READ            shift and go to state 51
    WRITE           shift and go to state 52
    PRINT           shift and go to state 53

    stmt                           shift and go to state 124
    location                       shift and go to state 45

state 100

    (55) relation -> relation OR . relation
    (53) relation -> . ( relation )
    (54) relation -> . NOT relation
    (55) relation -> . relation OR relation
    (56) relation -> . relation AND relation
    (57) relation -> . expr DF expr
    (58) relation -> . expr ET expr
    (59) relation -> . expr GE expr
    (60) relation -> . expr GT expr
    (61) relation -> . expr LE expr
    (62) relation -> . expr LT expr
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (               shift and go to state 76
    NOT             shift and go to state 77
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38

    relation                       shift and go to state 125
    expr                           shift and go to state 78

state 101

    (56) relation -> relation AND . relation
    (53) relation -> . ( relation )
    (54) relation -> . NOT relation
    (55) relation -> . relation OR relation
    (56) relation -> . relation AND relation
    (57) relation -> . expr DF expr
    (58) relation -> . expr ET expr
    (59) relation -> . expr GE expr
    (60) relation -> . expr GT expr
    (61) relation -> . expr LE expr
    (62) relation -> . expr LT expr
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (               shift and go to state 76
    NOT             shift and go to state 77
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38

    relation                       shift and go to state 126
    expr                           shift and go to state 78

state 102

    (53) relation -> ( relation . )
    (55) relation -> relation . OR relation
    (56) relation -> relation . AND relation
    )               shift and go to state 127
    OR              shift and go to state 100
    AND             shift and go to state 101


state 103

    (46) expr -> ( expr . )
    (57) relation -> expr . DF expr
    (58) relation -> expr . ET expr
    (59) relation -> expr . GE expr
    (60) relation -> expr . GT expr
    (61) relation -> expr . LE expr
    (62) relation -> expr . LT expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    )               shift and go to state 88
    DF              shift and go to state 105
    ET              shift and go to state 106
    GE              shift and go to state 107
    GT              shift and go to state 108
    LE              shift and go to state 109
    LT              shift and go to state 110
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60


state 104

    (54) relation -> NOT relation .
    (55) relation -> relation . OR relation
    (56) relation -> relation . AND relation
    THEN            reduce using rule 54 (relation -> NOT relation .)
    OR              reduce using rule 54 (relation -> NOT relation .)
    AND             reduce using rule 54 (relation -> NOT relation .)
    DO              reduce using rule 54 (relation -> NOT relation .)
    )               reduce using rule 54 (relation -> NOT relation .)


state 105

    (57) relation -> expr DF . expr
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 128

state 106

    (58) relation -> expr ET . expr
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 129

state 107

    (59) relation -> expr GE . expr
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 130

state 108

    (60) relation -> expr GT . expr
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 131

state 109

    (61) relation -> expr LE . expr
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 132

state 110

    (62) relation -> expr LT . expr
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 133

state 111

    (30) stmt -> WHILE relation DO . stmt
    (23) stmt -> . ID ( exprlist )
    (24) stmt -> . location ASSIGNOP expr
    (25) stmt -> . RETURN expr
    (26) stmt -> . SKIP
    (27) stmt -> . BEGIN stmtlist END
    (28) stmt -> . IF relation THEN stmt
    (29) stmt -> . BREAK
    (30) stmt -> . WHILE relation DO stmt
    (31) stmt -> . READ ( location )
    (32) stmt -> . WRITE ( expr )
    (33) stmt -> . PRINT ( literal )
    (35) location -> . ID [ expr ]
    (36) location -> . ID
    ID              shift and go to state 41
    RETURN          shift and go to state 46
    SKIP            shift and go to state 47
    BEGIN           shift and go to state 42
    IF              shift and go to state 48
    BREAK           shift and go to state 49
    WHILE           shift and go to state 50
    READ            shift and go to state 51
    WRITE           shift and go to state 52
    PRINT           shift and go to state 53

    stmt                           shift and go to state 134
    location                       shift and go to state 45

state 112

    (31) stmt -> READ ( location . )
    )               shift and go to state 135


state 113

    (35) location -> ID . [ expr ]
    (36) location -> ID .
    [               shift and go to state 69
    )               reduce using rule 36 (location -> ID .)


state 114

    (32) stmt -> WRITE ( expr . )
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    )               shift and go to state 136
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60


state 115

    (33) stmt -> PRINT ( literal . )
    )               shift and go to state 137


state 116

    (34) literal -> STRING .
    )               reduce using rule 34 (literal -> STRING .)


state 117

    (37) expr -> FLOAT ( expr ) .
    ]               reduce using rule 37 (expr -> FLOAT ( expr ) .)
    /               reduce using rule 37 (expr -> FLOAT ( expr ) .)
    *               reduce using rule 37 (expr -> FLOAT ( expr ) .)
    -               reduce using rule 37 (expr -> FLOAT ( expr ) .)
    +               reduce using rule 37 (expr -> FLOAT ( expr ) .)
    )               reduce using rule 37 (expr -> FLOAT ( expr ) .)
    ;               reduce using rule 37 (expr -> FLOAT ( expr ) .)
    END             reduce using rule 37 (expr -> FLOAT ( expr ) .)
    DF              reduce using rule 37 (expr -> FLOAT ( expr ) .)
    ET              reduce using rule 37 (expr -> FLOAT ( expr ) .)
    GE              reduce using rule 37 (expr -> FLOAT ( expr ) .)
    GT              reduce using rule 37 (expr -> FLOAT ( expr ) .)
    LE              reduce using rule 37 (expr -> FLOAT ( expr ) .)
    LT              reduce using rule 37 (expr -> FLOAT ( expr ) .)
    ,               reduce using rule 37 (expr -> FLOAT ( expr ) .)
    THEN            reduce using rule 37 (expr -> FLOAT ( expr ) .)
    OR              reduce using rule 37 (expr -> FLOAT ( expr ) .)
    AND             reduce using rule 37 (expr -> FLOAT ( expr ) .)
    DO              reduce using rule 37 (expr -> FLOAT ( expr ) .)


state 118

    (38) expr -> INT ( expr ) .
    ]               reduce using rule 38 (expr -> INT ( expr ) .)
    /               reduce using rule 38 (expr -> INT ( expr ) .)
    *               reduce using rule 38 (expr -> INT ( expr ) .)
    -               reduce using rule 38 (expr -> INT ( expr ) .)
    +               reduce using rule 38 (expr -> INT ( expr ) .)
    )               reduce using rule 38 (expr -> INT ( expr ) .)
    ;               reduce using rule 38 (expr -> INT ( expr ) .)
    END             reduce using rule 38 (expr -> INT ( expr ) .)
    DF              reduce using rule 38 (expr -> INT ( expr ) .)
    ET              reduce using rule 38 (expr -> INT ( expr ) .)
    GE              reduce using rule 38 (expr -> INT ( expr ) .)
    GT              reduce using rule 38 (expr -> INT ( expr ) .)
    LE              reduce using rule 38 (expr -> INT ( expr ) .)
    LT              reduce using rule 38 (expr -> INT ( expr ) .)
    ,               reduce using rule 38 (expr -> INT ( expr ) .)
    THEN            reduce using rule 38 (expr -> INT ( expr ) .)
    OR              reduce using rule 38 (expr -> INT ( expr ) .)
    AND             reduce using rule 38 (expr -> INT ( expr ) .)
    DO              reduce using rule 38 (expr -> INT ( expr ) .)


state 119

    (39) expr -> ID ( _3_exprlist_optional ) .
    ]               reduce using rule 39 (expr -> ID ( _3_exprlist_optional ) .)
    /               reduce using rule 39 (expr -> ID ( _3_exprlist_optional ) .)
    *               reduce using rule 39 (expr -> ID ( _3_exprlist_optional ) .)
    -               reduce using rule 39 (expr -> ID ( _3_exprlist_optional ) .)
    +               reduce using rule 39 (expr -> ID ( _3_exprlist_optional ) .)
    )               reduce using rule 39 (expr -> ID ( _3_exprlist_optional ) .)
    ;               reduce using rule 39 (expr -> ID ( _3_exprlist_optional ) .)
    END             reduce using rule 39 (expr -> ID ( _3_exprlist_optional ) .)
    DF              reduce using rule 39 (expr -> ID ( _3_exprlist_optional ) .)
    ET              reduce using rule 39 (expr -> ID ( _3_exprlist_optional ) .)
    GE              reduce using rule 39 (expr -> ID ( _3_exprlist_optional ) .)
    GT              reduce using rule 39 (expr -> ID ( _3_exprlist_optional ) .)
    LE              reduce using rule 39 (expr -> ID ( _3_exprlist_optional ) .)
    LT              reduce using rule 39 (expr -> ID ( _3_exprlist_optional ) .)
    ,               reduce using rule 39 (expr -> ID ( _3_exprlist_optional ) .)
    THEN            reduce using rule 39 (expr -> ID ( _3_exprlist_optional ) .)
    OR              reduce using rule 39 (expr -> ID ( _3_exprlist_optional ) .)
    AND             reduce using rule 39 (expr -> ID ( _3_exprlist_optional ) .)
    DO              reduce using rule 39 (expr -> ID ( _3_exprlist_optional ) .)


state 120

    (64) exprlist -> exprlist , . expr
    (37) expr -> . FLOAT ( expr )
    (38) expr -> . INT ( expr )
    (39) expr -> . ID ( _3_exprlist_optional )
    (42) expr -> . ID [ expr ]
    (43) expr -> . ID
    (44) expr -> . FCONST
    (45) expr -> . ICONST
    (46) expr -> . ( expr )
    (47) expr -> . + expr
    (48) expr -> . - expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    FLOAT           shift and go to state 30
    INT             shift and go to state 33
    ID              shift and go to state 34
    FCONST          shift and go to state 35
    ICONST          shift and go to state 36
    (               shift and go to state 32
    +               shift and go to state 37
    -               shift and go to state 38

    expr                           shift and go to state 138

state 121

    (42) expr -> ID [ expr ] .
    ]               reduce using rule 42 (expr -> ID [ expr ] .)
    /               reduce using rule 42 (expr -> ID [ expr ] .)
    *               reduce using rule 42 (expr -> ID [ expr ] .)
    -               reduce using rule 42 (expr -> ID [ expr ] .)
    +               reduce using rule 42 (expr -> ID [ expr ] .)
    )               reduce using rule 42 (expr -> ID [ expr ] .)
    ;               reduce using rule 42 (expr -> ID [ expr ] .)
    END             reduce using rule 42 (expr -> ID [ expr ] .)
    DF              reduce using rule 42 (expr -> ID [ expr ] .)
    ET              reduce using rule 42 (expr -> ID [ expr ] .)
    GE              reduce using rule 42 (expr -> ID [ expr ] .)
    GT              reduce using rule 42 (expr -> ID [ expr ] .)
    LE              reduce using rule 42 (expr -> ID [ expr ] .)
    LT              reduce using rule 42 (expr -> ID [ expr ] .)
    ,               reduce using rule 42 (expr -> ID [ expr ] .)
    THEN            reduce using rule 42 (expr -> ID [ expr ] .)
    OR              reduce using rule 42 (expr -> ID [ expr ] .)
    AND             reduce using rule 42 (expr -> ID [ expr ] .)
    DO              reduce using rule 42 (expr -> ID [ expr ] .)


state 122

    (23) stmt -> ID ( exprlist ) .
    ;               reduce using rule 23 (stmt -> ID ( exprlist ) .)
    END             reduce using rule 23 (stmt -> ID ( exprlist ) .)


state 123

    (35) location -> ID [ expr ] .
    ASSIGNOP        reduce using rule 35 (location -> ID [ expr ] .)
    )               reduce using rule 35 (location -> ID [ expr ] .)


state 124

    (28) stmt -> IF relation THEN stmt .
    ;               reduce using rule 28 (stmt -> IF relation THEN stmt .)
    END             reduce using rule 28 (stmt -> IF relation THEN stmt .)


state 125

    (55) relation -> relation OR relation .
    (55) relation -> relation . OR relation
    (56) relation -> relation . AND relation
    THEN            reduce using rule 55 (relation -> relation OR relation .)
    OR              reduce using rule 55 (relation -> relation OR relation .)
    DO              reduce using rule 55 (relation -> relation OR relation .)
    )               reduce using rule 55 (relation -> relation OR relation .)
    AND             shift and go to state 101


state 126

    (56) relation -> relation AND relation .
    (55) relation -> relation . OR relation
    (56) relation -> relation . AND relation
    THEN            reduce using rule 56 (relation -> relation AND relation .)
    OR              reduce using rule 56 (relation -> relation AND relation .)
    AND             reduce using rule 56 (relation -> relation AND relation .)
    DO              reduce using rule 56 (relation -> relation AND relation .)
    )               reduce using rule 56 (relation -> relation AND relation .)


state 127

    (53) relation -> ( relation ) .
    THEN            reduce using rule 53 (relation -> ( relation ) .)
    OR              reduce using rule 53 (relation -> ( relation ) .)
    AND             reduce using rule 53 (relation -> ( relation ) .)
    DO              reduce using rule 53 (relation -> ( relation ) .)
    )               reduce using rule 53 (relation -> ( relation ) .)


state 128

    (57) relation -> expr DF expr .
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    THEN            reduce using rule 57 (relation -> expr DF expr .)
    OR              reduce using rule 57 (relation -> expr DF expr .)
    AND             reduce using rule 57 (relation -> expr DF expr .)
    DO              reduce using rule 57 (relation -> expr DF expr .)
    )               reduce using rule 57 (relation -> expr DF expr .)
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60


state 129

    (58) relation -> expr ET expr .
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    THEN            reduce using rule 58 (relation -> expr ET expr .)
    OR              reduce using rule 58 (relation -> expr ET expr .)
    AND             reduce using rule 58 (relation -> expr ET expr .)
    DO              reduce using rule 58 (relation -> expr ET expr .)
    )               reduce using rule 58 (relation -> expr ET expr .)
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60


state 130

    (59) relation -> expr GE expr .
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    THEN            reduce using rule 59 (relation -> expr GE expr .)
    OR              reduce using rule 59 (relation -> expr GE expr .)
    AND             reduce using rule 59 (relation -> expr GE expr .)
    DO              reduce using rule 59 (relation -> expr GE expr .)
    )               reduce using rule 59 (relation -> expr GE expr .)
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60


state 131

    (60) relation -> expr GT expr .
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    THEN            reduce using rule 60 (relation -> expr GT expr .)
    OR              reduce using rule 60 (relation -> expr GT expr .)
    AND             reduce using rule 60 (relation -> expr GT expr .)
    DO              reduce using rule 60 (relation -> expr GT expr .)
    )               reduce using rule 60 (relation -> expr GT expr .)
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60


state 132

    (61) relation -> expr LE expr .
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    THEN            reduce using rule 61 (relation -> expr LE expr .)
    OR              reduce using rule 61 (relation -> expr LE expr .)
    AND             reduce using rule 61 (relation -> expr LE expr .)
    DO              reduce using rule 61 (relation -> expr LE expr .)
    )               reduce using rule 61 (relation -> expr LE expr .)
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60


state 133

    (62) relation -> expr LT expr .
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    THEN            reduce using rule 62 (relation -> expr LT expr .)
    OR              reduce using rule 62 (relation -> expr LT expr .)
    AND             reduce using rule 62 (relation -> expr LT expr .)
    DO              reduce using rule 62 (relation -> expr LT expr .)
    )               reduce using rule 62 (relation -> expr LT expr .)
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60


state 134

    (30) stmt -> WHILE relation DO stmt .
    ;               reduce using rule 30 (stmt -> WHILE relation DO stmt .)
    END             reduce using rule 30 (stmt -> WHILE relation DO stmt .)


state 135

    (31) stmt -> READ ( location ) .
    ;               reduce using rule 31 (stmt -> READ ( location ) .)
    END             reduce using rule 31 (stmt -> READ ( location ) .)


state 136

    (32) stmt -> WRITE ( expr ) .
    ;               reduce using rule 32 (stmt -> WRITE ( expr ) .)
    END             reduce using rule 32 (stmt -> WRITE ( expr ) .)


state 137

    (33) stmt -> PRINT ( literal ) .
    ;               reduce using rule 33 (stmt -> PRINT ( literal ) .)
    END             reduce using rule 33 (stmt -> PRINT ( literal ) .)


state 138

    (64) exprlist -> exprlist , expr .
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    ,               reduce using rule 64 (exprlist -> exprlist , expr .)
    )               reduce using rule 64 (exprlist -> exprlist , expr .)
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60
